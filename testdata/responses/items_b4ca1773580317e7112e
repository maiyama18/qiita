{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"概要\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%A6%82%E8%A6%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e概要\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003eReact\u003c/code\u003eでルーティングをするためのライブラリである\u003ccode\u003ereact-router\u003c/code\u003eのv4の基本的な使い方を覚えるために、簡単なwebページを作ってみます。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ereact-router\u003c/code\u003eのv4というと、v2やv3から破壊的な変更があり、かなり使いやすくなったとの評判なのですが、私はv4以前の\u003ccode\u003ereact-router\u003c/code\u003eを使ったことはなかったので、この記事には過去のversionとの比較という観点はありません。初めて使う人が、ルーティングの概念や\u003ccode\u003ereact-router\u003c/code\u003eの使い方がわかるチュートリアルになれば良いなと思いながら書きました。\u003c/p\u003e\n\n\u003cp\u003e方針としては、とにかくシンプルに小さなwebページを作ることにします。複雑な動作やサーバーとの通信はしませんし、cssもほぼ書きません。この記事は\u003ccode\u003ereact-router\u003c/code\u003eを勉強し始めた当日に書いているので、間違っている内容があるかもしれません。ご指摘ください。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"なぜreact-routerを使う必要があるのか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AA%E3%81%9Creact-router%E3%82%92%E4%BD%BF%E3%81%86%E5%BF%85%E8%A6%81%E3%81%8C%E3%81%82%E3%82%8B%E3%81%AE%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eなぜ\u003ccode\u003ereact-router\u003c/code\u003eを使う必要があるのか\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003eReact\u003c/code\u003eでふつうにSPAを書くと、描画されるコンポーネントが変わって画面が遷移してもURLは変わらないと思います。つまり、URLとアプリの状態が関連づいていない状況になります。この２つを関連づけて、URLからアプリ内の特定の状態にアクセスできるようにしたり、逆にアプリ内での状態変化をURLに反映させたりすることをルーティングと言います。ルーティングをすることによって、ブラウザの戻るボタンが使えるようになったり、特定のURLを打ち込むことで特定のページに直接アクセスできるようになるというメリットがあります。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ereact\u003c/code\u003eでルーティングをするためのデファクトのライブラリが\u003ccode\u003ereact-router\u003c/code\u003eです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"完成品\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%8C%E6%88%90%E5%93%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e完成品\u003c/h1\u003e\n\n\u003cp\u003eキャラクターに人気投票するページを作りましょう。\u003ccode\u003eReact\u003c/code\u003eのチュートリアルでよくあるCounterの例とルーティングを組み合わせたものと考えると良いと思います。以下にアニメgifを貼っておきますが、描画しているコンテンツとURLが連動しており、またブラウザの戻る/進むボタンが機能しているのがわかると思います。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/a6f606b971618130f59c2ae9cf51ec5ff9be7fa5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3135393236302f30373361646262322d646536652d333436362d303564352d3236323033333538663561612e676966\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/a6f606b971618130f59c2ae9cf51ec5ff9be7fa5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3135393236302f30373361646262322d646536652d333436362d303564352d3236323033333538663561612e676966\" alt=\"4.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/159260/073adbb2-de6e-3466-05d5-26203358f5aa.gif\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eコードとデモのサイトは以下にあります。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ymr-39/react-router-v4-tutorial\" rel=\"nofollow noopener\" target=\"_blank\"\u003eコード（github）\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://yam-net.github.io/react-router-v4-tutorial\" rel=\"nofollow noopener\" target=\"_blank\"\u003eデモ\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eにあります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"環境\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%92%B0%E5%A2%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e環境\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eMac OS X 10.12.3\u003c/li\u003e\n\u003cli\u003enode 7.10.0\u003c/li\u003e\n\u003cli\u003enpm 4.2.0\u003c/li\u003e\n\u003cli\u003ecreate-react-app 1.3.1\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eライブラリのバージョンは以下で示す\u003ccode\u003epackage.json\u003c/code\u003eを見てください。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"とりあえずアプリの形をつくる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E5%BD%A2%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eとりあえずアプリの形をつくる\u003c/h1\u003e\n\n\u003cp\u003eとりあえず\u003ccode\u003eReact\u003c/code\u003eが動く環境が必要なので、簡単のため\u003ccode\u003ecreate-react-app\u003c/code\u003eを使います（使いたくない人は以下適宜読みかえてください）。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell-session\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"go\"\u003e// create-react-appをインストールしていない人は\n// npm i -g create-react-app\n\ncreate-react-app react-router-v4-tutorial\ncd react-router-v4-tutorial\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003ereact-router\u003c/code\u003eをインストールします。\u003ccode\u003ereact-router\u003c/code\u003eにはいくつかのパッケージに分けられているのですが、\u003ca href=\"https://github.com/ReactTraining/react-router\" rel=\"nofollow noopener\" target=\"_blank\"\u003e公式のgithub\u003c/a\u003eを見ると、ブラウザで動くページを書くには\u003ccode\u003ereact-router-dom\u003c/code\u003eを使えばいいことがわかります。\u003ccode\u003ereact-router\u003c/code\u003eはコアの機能を担っているのですが、\u003ca href=\"https://github.com/ReactTraining/react-router/issues/4648\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003ereact-router-dom\u003c/code\u003eが\u003ccode\u003ereact-router\u003c/code\u003eのexportも含めてexportしてくれる\u003c/a\u003eようなので、\u003ccode\u003ereact-router\u003c/code\u003eをインストールする必要はありません。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell-session\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"go\"\u003enpm install -S react-router-dom\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこの時点で\u003ccode\u003epackage.json\u003c/code\u003eは以下のようになっています。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"json\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003epackage.json\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"name\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"react-router-v4-tutorial\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"version\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"0.1.0\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"private\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"dependencies\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"react\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"^15.6.1\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"react-dom\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"^15.6.1\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"react-router-dom\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"^4.1.1\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"devDependencies\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"react-scripts\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"1.0.7\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"scripts\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"start\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"react-scripts start\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"build\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"react-scripts build\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"test\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"react-scripts test --env=jsdom\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"eject\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"react-scripts eject\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003ecreate-react-app\u003c/code\u003eで生成された余計なファイルがいっぱいあるので、いったん\u003ccode\u003esrc\u003c/code\u003eの中のファイルをすべて消して０から書くことにしましょう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell-session\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"go\"\u003ecd src\nrm *\ntouch index.js App.js\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eまずふつうに\u003ccode\u003eindex.js\u003c/code\u003eを書きます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"javascript\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eindex.js\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e'react'\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"nx\"\u003eReactDOM\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e'react-dom'\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"nx\"\u003eApp\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e'./App'\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eReactDOM\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003erender\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nx\"\u003eApp\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementById\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'root'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e次に\u003ccode\u003eApp.js\u003c/code\u003eです。今回は、すべてのコンポーネントを\u003ccode\u003eApp.js\u003c/code\u003eの中に書くことにします。とりあえず、複雑なロジックは無視してルーティングの骨格の部分のみ書きましょう。Home, About, Friendsの3つのページを用意します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eApp.js\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eimport React, { Component } from 'react'\nimport { BrowserRouter, Route, Link } from 'react-router-dom'\n\nconst App = () =\u0026gt; (\n  \u0026lt;BrowserRouter\u0026gt;\n    \u0026lt;div\u0026gt;\n      \u0026lt;Route exact path='/' component={Home} /\u0026gt;\n      \u0026lt;Route path='/about' component={About} /\u0026gt;\n      \u0026lt;Route path='/friends' component={Friends} /\u0026gt;\n    \u0026lt;/div\u0026gt;\n  \u0026lt;/BrowserRouter\u0026gt;\n)\n\nconst Home = () =\u0026gt; (\n  \u0026lt;div\u0026gt;\n    \u0026lt;h2\u0026gt;Home\u0026lt;/h2\u0026gt;\n    \u0026lt;p\u0026gt;Welcome to ようこそ\u0026lt;/p\u0026gt;\n  \u0026lt;/div\u0026gt;\n)\nconst About = () =\u0026gt; (\n  \u0026lt;div\u0026gt;\n    \u0026lt;h2\u0026gt;About\u0026lt;/h2\u0026gt;\n    \u0026lt;p\u0026gt;フレンズに投票するページです\u0026lt;/p\u0026gt;\n  \u0026lt;/div\u0026gt;\n)\nconst Friends = () =\u0026gt; (\n  \u0026lt;div\u0026gt;\n    \u0026lt;h2\u0026gt;Friends\u0026lt;/h2\u0026gt;\n    \u0026lt;p\u0026gt;ここにフレンズのリストを書きます\u0026lt;/p\u0026gt;\n  \u0026lt;/div\u0026gt;\n)\n\nexport default App\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e実際にサイトを開いてみましょう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell-session\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"go\"\u003enpm start\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eして、ブラウザで\u003ccode\u003elocalhost:3000\u003c/code\u003eにアクセスします。ここで、まずは\u003ccode\u003e\u0026lt;Home\u0026gt;\u003c/code\u003eコンポーネントが開き、URLを\u003ccode\u003elocalhost:3000/about\u003c/code\u003eに変更すると\u003ccode\u003e\u0026lt;About\u0026gt;\u003c/code\u003eが、さらに\u003ccode\u003elocalhost:3000/friends\u003c/code\u003eに変更すると\u003ccode\u003e\u0026lt;Friends\u0026gt;\u003c/code\u003eが開くことが確認できると思います。これで、URLとページに表示する内容を対応させる、基本的なルーティングができました。\u003c/p\u003e\n\n\u003cp\u003eこのルーティングを実現しているのが、\u003ccode\u003eApp.js\u003c/code\u003eの中で呼ばれている\u003ccode\u003e\u0026lt;BrowserRouter\u0026gt;\u003c/code\u003eと\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eです。\u003ccode\u003e\u0026lt;BrowserRouter\u0026gt;\u003c/code\u003eの中にいくつか\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eを書き、\u003ccode\u003epath\u003c/code\u003eに対応させたいURLを、\u003ccode\u003ecomponent\u003c/code\u003eに描画したいコンポーネントを渡します。ここで、\u003ccode\u003eexact\u003c/code\u003eを設定しない限り、\u003ccode\u003epath\u003c/code\u003eが入力したURLに前方一致していれば描画される（つまり\u003ccode\u003elocalhost:3000/\u003c/code\u003e以下のすべてのURLに対して\u003ccode\u003e\u0026lt;Home\u0026gt;\u003c/code\u003eが描画されてしまう）ため、\u003ccode\u003e\u0026lt;Home\u0026gt;\u003c/code\u003eには\u003ccode\u003eexact\u003c/code\u003eを設定しています。\u003c/p\u003e\n\n\u003cp\u003eもっと詳しい情報については以下のドキュメントをどうぞ。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reacttraining.com/react-router/web/api/BrowserRouter\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003e\u0026lt;BrowserRouter\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://reacttraining.com/react-router/web/api/Route\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eさて、ここまでで完成したサイトはページの遷移の際にURLを直接打ち込まなければならず、明らかに不便です。それぞれのページに対するリンクを用意するために、\u003ccode\u003e\u0026lt;App\u0026gt;\u003c/code\u003eを書き換えましょう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"diff\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eApp.js\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003econst App = () =\u0026gt; (\n  \u0026lt;BrowserRouter\u0026gt;\n    \u0026lt;div\u0026gt;\n\u003cspan class=\"gi\"\u003e+     \u0026lt;ul\u0026gt;\n+       \u0026lt;li\u0026gt;\u0026lt;Link to='/'\u0026gt;Home\u0026lt;/Link\u0026gt;\u0026lt;/li\u0026gt;\n+       \u0026lt;li\u0026gt;\u0026lt;Link to='/about'\u0026gt;About\u0026lt;/Link\u0026gt;\u0026lt;/li\u0026gt;\n+       \u0026lt;li\u0026gt;\u0026lt;Link to='/friends'\u0026gt;Friends\u0026lt;/Link\u0026gt;\u0026lt;/li\u0026gt;\n+     \u0026lt;/ul\u0026gt;\n\u003c/span\u003e\n\u003cspan class=\"gi\"\u003e+     \u0026lt;hr /\u0026gt;\n+     \n\u003c/span\u003e      \u0026lt;Route exact path='/' component={Home} /\u0026gt;\n      \u0026lt;Route path='/about' component={About} /\u0026gt;\n      \u0026lt;Route path='/friends' component={Friends} /\u0026gt;\n    \u0026lt;/div\u0026gt;\n  \u0026lt;/BrowserRouter\u0026gt;\n)\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003e\u0026lt;Link\u0026gt;\u003c/code\u003e要素の\u003ccode\u003eto\u003c/code\u003eに遷移させたい\u003ccode\u003epath\u003c/code\u003eを設定しておくことで、クリックされたとき自動で遷移してくれるようになります。これについてもドキュメントを貼っておきます。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reacttraining.com/react-router/web/api/Link\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003e\u0026lt;Link\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eここでページの動きを見てみましょう。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/f0a946d3c1bc935b61d5a56d540b39587b6a0322/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3135393236302f34306337623465612d326230362d323638342d303733662d3534303764353266393164372e676966\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/f0a946d3c1bc935b61d5a56d540b39587b6a0322/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3135393236302f34306337623465612d326230362d323638342d303733662d3534303764353266393164372e676966\" alt=\"1.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/159260/40c7b4ea-2b06-2684-073f-5407d52f91d7.gif\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eリンクもうまく動いていますし、ブラウザの戻るボタンもちゃんと機能していますね。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"2段階のルーティング\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2%E6%AE%B5%E9%9A%8E%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2段階のルーティング\u003c/h1\u003e\n\n\u003cp\u003e基本的なルーティングは以上で終わりです。もう少し複雑なことをしてみましょう。\u003ccode\u003efriends\u003c/code\u003eにアクセスしたときに、キャラクターのリストを表示して、かつそのリストからそれぞれのキャラクターのページに飛べるようにします。\u003c/p\u003e\n\n\u003cp\u003eまずは、表示したいキャラクターのリストを用意します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"javascript\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eApp.js\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eFRIENDS\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'serval'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003enameJa\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'サーバル'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003enameEn\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'Serval Cat'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003efamily\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'ネコ目ネコ科ネコ属'\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'raccoon'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003enameJa\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'アライグマ'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003enameEn\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'Common raccoon'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003efamily\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'ネコ目アライグマ科アライグマ属'\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'fennec'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003enameJa\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'フェネック'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003enameEn\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'Fennec'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003efamily\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e'ネコ目イヌ科キツネ属'\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efriendById\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eFRIENDS\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efriend\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003efriend\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eid\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eそれぞれの要素に\u003ccode\u003eid\u003c/code\u003eを用意し、あとでこの\u003ccode\u003eid\u003c/code\u003eをそれぞれのキャラクターのページにアクセスする\u003ccode\u003epath\u003c/code\u003eとして使うことにします。つまり、例えばキャラクター「サーバル」の\u003ccode\u003eid\u003c/code\u003eが\u003ccode\u003eserval\u003c/code\u003eになっているので、\u003ccode\u003elocalhost:3000/friends/serval\u003c/code\u003eでサーバルのページに飛ぶようにするということです。また、\u003ccode\u003eid\u003c/code\u003eをもとにリストから対応するキャラクターのオブジェクトを探す\u003ccode\u003efriendById\u003c/code\u003eという関数を書いておきました。\u003c/p\u003e\n\n\u003cp\u003eそれでは、\u003ccode\u003e\u0026lt;Friends\u0026gt;\u003c/code\u003eコンポーネントを書き換えます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"diff\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eApp.js\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003econst Friends = () =\u0026gt; (\n  \u0026lt;div\u0026gt;\n    \u0026lt;h2\u0026gt;Friends\u0026lt;/h2\u0026gt;\n\u003cspan class=\"gd\"\u003e-   \u0026lt;p\u0026gt;ここにフレンズのリストを書きます\u0026lt;/p\u0026gt;\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+   \u0026lt;Route exact path='/friends' component={FriendList} /\u0026gt;\n+   \u0026lt;Route path='/friends/:id' component={Friend} /\u0026gt;\n\u003c/span\u003e  \u0026lt;/div\u0026gt;\n)\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eここで、\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eで表示される\u003ccode\u003e\u0026lt;Friends\u0026gt;\u003c/code\u003eの中にさらにもう１段階\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eを作って表示をわける必要があるのですが、上記のようにそのままふつうに書けば問題ありません。まず、正確に\u003ccode\u003elocalhost:3000/friends\u003c/code\u003eにアクセスした場合は、\u003ccode\u003e\u0026lt;FriendList\u0026gt;\u003c/code\u003eを表示し、さらにその後ろにキャラクターの\u003ccode\u003eid\u003c/code\u003eをつけた場合、対応するキャラクターのページを表示するようにしています。\u003c/p\u003e\n\n\u003cp\u003eここで、\u003ccode\u003efriends/:id\u003c/code\u003eのようにコロンをつけることによって、その部分に入力された文字列を変数として受け取って描画できるコンポーネント内で使えるようになります。それでは、その\u003ccode\u003eid\u003c/code\u003eを使う部分も含めて、\u003ccode\u003e\u0026lt;FriendList\u0026gt;\u003c/code\u003eと\u003ccode\u003e\u0026lt;Friend\u0026gt;\u003c/code\u003eを書いていきます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eApp.js\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003econst FriendList = () =\u0026gt; (\n  \u0026lt;div\u0026gt;\n    {FRIENDS.map(friend =\u0026gt; (\n      \u0026lt;li key={friend.id}\u0026gt;\n        \u0026lt;Link to={`/friends/${friend.id}`}\u0026gt;{friend.nameJa}\u0026lt;/Link\u0026gt;\n      \u0026lt;/li\u0026gt;\n    ))}\n  \u0026lt;/div\u0026gt;\n)\n\nconst Friend = props =\u0026gt; {\n  const { id } = props.match.params\n  const friend = friendById(id)\n\n  if (typeof friend === 'undefined')  {\n    return (\n      \u0026lt;div\u0026gt;\n        \u0026lt;p\u0026gt;Friends with id '{id}' does not exist.\u0026lt;/p\u0026gt;\n      \u0026lt;/div\u0026gt;\n    )\n  }\n\n\n  const containerStyle = { border: '1px gray solid', display: 'inline-block', padding: 10 }\n  const contentsStyle = { margin: 0 }\n\n  return (\n    \u0026lt;div\u0026gt;\n      \u0026lt;div style={containerStyle}\u0026gt;\n        \u0026lt;p style={contentsStyle}\u0026gt;{friend.family}\u0026lt;/p\u0026gt;\n        \u0026lt;h1 style={contentsStyle}\u0026gt;{friend.nameJa}\u0026lt;/h1\u0026gt;\n        \u0026lt;p style={contentsStyle}\u0026gt;{friend.nameEn}\u0026lt;/p\u0026gt;\n      \u0026lt;/div\u0026gt;\n    \u0026lt;/div\u0026gt;\n  )\n}\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eまず、\u003ccode\u003e\u0026lt;FriendList\u0026gt;\u003c/code\u003eでは、配列\u003ccode\u003eFRIENDS\u003c/code\u003eを\u003ccode\u003emap\u003c/code\u003eして、それぞれのキャラクターのページへの\u003ccode\u003e\u0026lt;Link\u0026gt;\u003c/code\u003eを貼っています。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e\u0026lt;Friend\u0026gt;\u003c/code\u003eの動作は少し複雑です。まず、このコンポーネントでは\u003ccode\u003eprops\u003c/code\u003eを受け取っています。\u003ccode\u003e\u0026lt;Friends\u0026gt;\u003c/code\u003eのコードを見ると、\u003ccode\u003e\u0026lt;Friend\u0026gt;\u003c/code\u003eはなにも\u003ccode\u003eprops\u003c/code\u003eを受け取っていないように見えるのですが、実はすべての\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eは自動的にいくつかの\u003ccode\u003eprops\u003c/code\u003eを受け取ります。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reacttraining.com/react-router/web/api/Route/Route-props\" rel=\"nofollow noopener\" target=\"_blank\"\u003eRoute props\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e今回は、その中の\u003ccode\u003ematch\u003c/code\u003eを使います。実は、\u003ccode\u003ematch.params.id\u003c/code\u003eの中に、\u003ccode\u003e\u0026lt;Friends\u0026gt;\u003c/code\u003e内で\u003ccode\u003e\u0026lt;Friend\u0026gt;\u003c/code\u003eにアクセスするときの\u003ccode\u003epath\u003c/code\u003eの\u003ccode\u003e/friends/:id\u003c/code\u003eの\u003ccode\u003e:id\u003c/code\u003eの部分の文字列が入っているのです。\u003c/p\u003e\n\n\u003cp\u003eそのため、この受け取った\u003ccode\u003eid\u003c/code\u003eをもとに\u003ccode\u003efriend\u003c/code\u003eのオブジェクトを探し出し、それを描画に使うことで対応するキャラクターの画面を表示することができます。\u003c/p\u003e\n\n\u003cp\u003eたとえば\u003ccode\u003e/friends/serval\u003c/code\u003eにアクセスしたときには、\u003ccode\u003e\u0026lt;Friend\u0026gt;\u003c/code\u003e内での\u003ccode\u003eid\u003c/code\u003eは\u003ccode\u003eserval\u003c/code\u003eになり、\u003ccode\u003efriendById\u003c/code\u003eによって\u003ccode\u003efriend\u003c/code\u003eには配列\u003ccode\u003eFRIENDS\u003c/code\u003eの要素である以下のオブジェクトが入ることになります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e{\n  id: 'serval',\n  nameJa: 'サーバル',\n  nameEn: 'Serval Cat',\n  family: 'ネコ目ネコ科ネコ属'\n}\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eコードを見ると、\u003ccode\u003erender()\u003c/code\u003eの内部で、上記のオブジェクトがうまく描画に使われていることがわかると思います。\u003c/p\u003e\n\n\u003cp\u003eまた、\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eApp.js\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eif (typeof friend === 'undefined')  {\n  return (\n    \u0026lt;div\u0026gt;\n      \u0026lt;p\u0026gt;Friends with id '{id}' does not exist.\u0026lt;/p\u0026gt;\n    \u0026lt;/div\u0026gt;\n  )\n}\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eの部分は存在しない\u003ccode\u003eid\u003c/code\u003eにアクセスされたときのためのエラー処理です。例えば、ブラウザで\u003ccode\u003elocalhost:3000/dog\u003c/code\u003eにアクセスすると、\u003ccode\u003eFRIENDS\u003c/code\u003e内に\u003ccode\u003eid\u003c/code\u003eが\u003ccode\u003edog\u003c/code\u003eの要素がないことから\u003ccode\u003efriend\u003c/code\u003eが\u003ccode\u003eundefined\u003c/code\u003eになってしまうので、その際に別の画面を表示するようにしています。\u003c/p\u003e\n\n\u003cp\u003eそれでは、ページを見てみましょう。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/108f50e19c4384c85645b563848ada5a2695c461/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3135393236302f35616239623439642d356565322d316638312d373936642d3061396332333839326436642e676966\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/108f50e19c4384c85645b563848ada5a2695c461/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3135393236302f35616239623439642d356565322d316638312d373936642d3061396332333839326436642e676966\" alt=\"2.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/159260/5ab9b49d-5ee2-1f81-796d-0a9c23892d6d.gif\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eうまく動いています。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"reactの機能を使う\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#react%E3%81%AE%E6%A9%9F%E8%83%BD%E3%82%92%E4%BD%BF%E3%81%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eReactの機能を使う\u003c/h1\u003e\n\n\u003cp\u003eここで終わっても良いのですが、冷静に考えてここまでは\u003ccode\u003eReact\u003c/code\u003eの機能をなにも使っておらず、単にルーティングをして静的なコンポーネントを返しているだけです。せっかくなので、\u003ccode\u003eReact\u003c/code\u003eを使って動的なページにしてみましょう。\u003c/p\u003e\n\n\u003cp\u003e今回は、\u003ccode\u003e\u0026lt;FriendList\u0026gt;\u003c/code\u003eからキャラクターに投票できるようにして、各\u003ccode\u003e\u0026lt;Friend\u0026gt;\u003c/code\u003eのページで投票数を表示するようにします。\u003c/p\u003e\n\n\u003cp\u003eまずは、\u003ccode\u003e\u0026lt;Friends\u0026gt;\u003c/code\u003e以下を書き換えます。ここで、\u003ccode\u003e\u0026lt;Friends\u0026gt;\u003c/code\u003eに投票数の状態を持たせたいため、既存の\u003ccode\u003e\u0026lt;Friends\u0026gt;\u003c/code\u003eを消して、関数ではなくクラスとして０から書き直すことにします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eApp.js\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eclass Friends extends Component {\n  constructor() {\n    super()\n    this.state = {}\n    this.handleVote = this.handleVote.bind(this)\n  }\n\n  componentWillMount() {\n    FRIENDS.forEach(friend =\u0026gt; {\n      this.setState({\n        ...this.state,\n        [friend.id]: 0\n      })\n    })\n  }\n\n  handleVote(id) {\n    this.setState({\n      [id]: this.state[id] + 1\n    })\n  }\n\n  render() {\n    return (\n      \u0026lt;div\u0026gt;\n        \u0026lt;h2\u0026gt;Friends\u0026lt;/h2\u0026gt;\n        \u0026lt;Route exact path='/friends' render={props =\u0026gt; \u0026lt;FriendList handleVote={this.handleVote} /\u0026gt;} /\u0026gt;\n        \u0026lt;Route path='/friends/:id' render={props =\u0026gt; \u0026lt;Friend match={props.match} votes={this.state} /\u0026gt;} /\u0026gt;\n      \u0026lt;/div\u0026gt;\n    )\n  }\n}\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eかなり大きな変更があります。まず、\u003ccode\u003econstructor()\u003c/code\u003eと\u003ccode\u003ecomponentWillMount()\u003c/code\u003e内で\u003ccode\u003estate\u003c/code\u003eを初期化しています。とくに\u003ccode\u003ecomponentWillMount()\u003c/code\u003e内は複雑なコードに見えますが、冷静に見てみると、単に\u003ccode\u003estate\u003c/code\u003eを\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ethis.state = {\n  serval: 0,\n  raccoon: 0,\n  fennec: 0\n}\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eとしているのと同じことです（最初からそう書けという気もしますが、今後\u003ccode\u003eFRIENDS\u003c/code\u003eが増えてもコードの変更をしなくて良いようにしています）。この\u003ccode\u003estate\u003c/code\u003eは、各キャラクターへの投票数を表しています。また、イベントハンドラの\u003ccode\u003ehandleVote\u003c/code\u003eで、投票に応じて\u003ccode\u003estate\u003c/code\u003eにおいて対応するキャラクターの投票数を１増やすようにしています。\u003c/p\u003e\n\n\u003cp\u003eさて、投票のボタンを\u003ccode\u003e\u0026lt;FriendList\u0026gt;\u003c/code\u003eに置いて、投票数を\u003ccode\u003e\u0026lt;Friend\u0026gt;\u003c/code\u003e内に表示したいので、それぞれ\u003ccode\u003ehandleVote\u003c/code\u003eを\u003ccode\u003e\u0026lt;FriendList\u0026gt;\u003c/code\u003eに、\u003ccode\u003ethis.state\u003c/code\u003eを\u003ccode\u003e\u0026lt;Friend\u0026gt;\u003c/code\u003eに渡したいです。ただ、上でも述べたように\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eには、\u003ccode\u003ematch\u003c/code\u003eなどデフォルトで渡される\u003ccode\u003eprops\u003c/code\u003eがあり、追加の\u003ccode\u003eprops\u003c/code\u003eを渡すことができないようになっています（たぶん）。そのため、\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eを、\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"diff\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eApp.js\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gd\"\u003e- \u0026lt;Route exact path='/friends' component={FriendList} /\u0026gt;\n- \u0026lt;Route path='/friends/:id' component={Friend} /\u0026gt;\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+ \u0026lt;Route exact path='/members' render={props =\u0026gt; \u0026lt;FriendList handleVote={this.handleVote} /\u0026gt;} /\u0026gt;\n+ \u0026lt;Route path='/members/:id' render={props =\u0026gt; \u0026lt;Friend match={props.match} votes={this.state} /\u0026gt;} /\u0026gt;\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eのように書き換えています。実は、\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eに描画するコンポーネントを渡すには\u003ccode\u003ecomponent\u003c/code\u003e以外にも、\u003ccode\u003erender\u003c/code\u003e、\u003ccode\u003echildren\u003c/code\u003eという方法があり、ここでは\u003ccode\u003erender\u003c/code\u003eを使っています。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003erender\u003c/code\u003eには、「\u003ccode\u003ematch\u003c/code\u003eなどが含まれるデフォルトの\u003ccode\u003eprops\u003c/code\u003eを引数にとって、描画したいコンポーネントを返す関数」を渡すことにより描画をします。\u003ccode\u003e\u0026lt;FriendList\u0026gt;\u003c/code\u003eではデフォルトの\u003ccode\u003eprops\u003c/code\u003eを使っていないことから\u003ccode\u003ehandleVote\u003c/code\u003eのみを渡し、\u003ccode\u003e\u0026lt;Friend\u0026gt;\u003c/code\u003eでは\u003ccode\u003ematch\u003c/code\u003eを使うので\u003ccode\u003ematch\u003c/code\u003eと投票数\u003ccode\u003ethis.state\u003c/code\u003eを\u003ccode\u003evotes\u003c/code\u003eとして渡しています。\u003c/p\u003e\n\n\u003cp\u003eそれでは、\u003ccode\u003e\u0026lt;FriendList\u0026gt;\u003c/code\u003eと\u003ccode\u003e\u0026lt;Friend\u0026gt;\u003c/code\u003eを見ていきましょう。これらは、渡された\u003ccode\u003eprops\u003c/code\u003eをうまく使ってあげれば良いだけなので小さな変更です。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"diff\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eApp.js\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gd\"\u003e- const FriendList = () =\u0026gt; (\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+ const FriendList = props =\u0026gt; (\n\u003c/span\u003e  \u0026lt;div\u0026gt;\n    {FRIENDS.map(friend =\u0026gt; (\n      \u0026lt;li key={fiend.id}\u0026gt;\n        \u0026lt;Link to={`/friends/${friend.id}`}\u0026gt;{friend.nameJa}\u0026lt;/Link\u0026gt;\n\u003cspan class=\"gi\"\u003e+       \u0026lt;button onClick={() =\u0026gt; props.handleVote(friend.id)}\u0026gt;+\u0026lt;/button\u0026gt;\n\u003c/span\u003e      \u0026lt;/li\u0026gt;\n    ))}\n  \u0026lt;/div\u0026gt;\n)\n\nconst Friend = props =\u0026gt; {\n  const { id } = props.match.params\n  const friend = friendById(id)\n\u003cspan class=\"gi\"\u003e+ const vote = props.votes[id]\n\u003c/span\u003e\n  if (typeof friend === 'undefined')  {\n    return (\n      \u0026lt;div\u0026gt;\n        \u0026lt;p\u0026gt;Friends with id '{id}' does not exist.\u0026lt;/p\u0026gt;\n      \u0026lt;/div\u0026gt;\n    )\n  }\n\n  const containerStyle = { border: '1px gray solid', display: 'inline-block', padding: 10 }\n  const contentsStyle = { margin: 0 }\n\n  return (\n    \u0026lt;div\u0026gt;\n      \u0026lt;div style={containerStyle}\u0026gt;\n        \u0026lt;p style={contentsStyle}\u0026gt;{friend.family}\u0026lt;/p\u0026gt;\n        \u0026lt;h1 style={contentsStyle}\u0026gt;{friend.nameJa}\u0026lt;/h1\u0026gt;\n        \u0026lt;p style={contentsStyle}\u0026gt;{friend.nameEn}\u0026lt;/p\u0026gt;\n      \u0026lt;/div\u0026gt;\n\u003cspan class=\"gi\"\u003e+     \u0026lt;h1\u0026gt;Vote: {vote}\u0026lt;/h1\u0026gt;\n\u003c/span\u003e    \u0026lt;/div\u0026gt;\n  )\n}\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eそれでは、ページの動きを見てみます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/162f66c583da21c34d9e5df36147f2bbade998b8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3135393236302f36623762393930302d306335332d633635302d366339342d6534323839363662303665622e676966\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/162f66c583da21c34d9e5df36147f2bbade998b8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3135393236302f36623762393930302d306335332d633635302d366339342d6534323839363662303665622e676966\" alt=\"3.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/159260/6b7b9900-0c53-c650-6c94-e428966b06eb.gif\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eということで、無事投票ができています。以上でこのページは完成とします。\u003c/p\u003e\n\n\u003cp\u003e※今回は、簡単のため投票数を\u003ccode\u003e\u0026lt;Friends\u0026gt;\u003c/code\u003eコンポーネントで管理していますが、これだと\u003ccode\u003e\u0026lt;FriendList\u0026gt;\u003c/code\u003eで投票してから一旦違うページ（例えば\u003ccode\u003e\u0026lt;About\u0026gt;\u003c/code\u003e）に飛ぶと投票数の情報が失われてしまいます。この問題は、情報をさらに持ち上げて\u003ccode\u003e\u0026lt;App\u0026gt;\u003c/code\u003eの\u003ccode\u003estate\u003c/code\u003eで管理するか、\u003ccode\u003eredux\u003c/code\u003eを使って\u003ccode\u003estore\u003c/code\u003eで管理するなどにより解決します。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"今回使っていないapi\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BB%8A%E5%9B%9E%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84api\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e今回使っていないAPI\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003ereact-router\u003c/code\u003eの機能のうち、今回使っていないものをいくつか紹介します。それぞれについて、公式のドキュメントと使用例を貼っていきます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"route-children\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#route-children\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003e\u0026lt;Route children={...}\u0026gt;\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eにコンポーネントを渡す方法で\u003ccode\u003ecomponent\u003c/code\u003eと\u003ccode\u003erender\u003c/code\u003eを紹介しましたが、もう一つ\u003ccode\u003echildren\u003c/code\u003eというやり方があります。使い方は\u003ccode\u003erender\u003c/code\u003eと同じのようですが、こちらは\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eがURLにmatchしないとき、\u003ccode\u003eprops.match\u003c/code\u003eが\u003ccode\u003enull\u003c/code\u003eになるという違いがあるようです。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reacttraining.com/react-router/web/api/Route/children-func\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003e children: func\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"navlink\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#navlink\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003e\u0026lt;NavLink\u0026gt;\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003e\u0026lt;NavLink\u0026gt;\u003c/code\u003eは\u003ccode\u003e\u0026lt;Link\u0026gt;\u003c/code\u003eと同じ働きをしますが、描画されているコンポーネントに対応するリンクにスタイリングをすることができます。今回作ったページでも、\u003ccode\u003e\u0026lt;App\u0026gt;\u003c/code\u003eの中の\u003ccode\u003e\u0026lt;Link\u0026gt;\u003c/code\u003eを\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u0026lt;ul\u0026gt;\n  \u0026lt;li\u0026gt;\u0026lt;NavLink activeStyle={{ color: 'red' }} exact to='/'\u0026gt;Home\u0026lt;/NavLink\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;\u0026lt;NavLink activeStyle={{ color: 'red' }} to='/about'\u0026gt;About\u0026lt;/NavLink\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;\u0026lt;NavLink activeStyle={{ color: 'red' }} to='/friends'\u0026gt;Friends\u0026lt;/NavLink\u0026gt;\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのように変更するだけで、現在のURLに対応するリンクをスタイリングしてくれます。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reacttraining.com/react-router/web/api/NavLink\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003e\u0026lt;NavLink\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"redirect\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#redirect\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003e\u0026lt;Redirect\u0026gt;\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003e例えばログインしていないユーザーとログインしているユーザーで別のコンテンツを描画したいときとかに使えるっぽいです。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reacttraining.com/react-router/web/api/Redirect\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003e\u0026lt;Redirect\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://reacttraining.com/react-router/web/example/auth-workflow\" rel=\"nofollow noopener\" target=\"_blank\"\u003eRedirect Auth example\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"switch\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#switch\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003e\u0026lt;Switch\u0026gt;\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003e今回は複数の\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eを並べるとき単に\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u0026lt;Route ...\u0026gt;\n\u0026lt;Route ...\u0026gt;\n\u0026lt;Route ...\u0026gt;\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eと書いていましたが、これを\u003ccode\u003e\u0026lt;Switch\u0026gt;\u003c/code\u003eを使って\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u0026lt;Switch\u0026gt;\n  \u0026lt;Route ...\u0026gt;\n  \u0026lt;Route ...\u0026gt;\n  \u0026lt;Route ...\u0026gt;\n\u0026lt;/Switch\u0026gt;\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eと書くことができます。これによって、\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eが排他的に描画されるようになります。すなわち、URLが複数の\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eにmatchしている場合でも、ただ一つだけ一番上の\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eが描画されます。これによって、意図せず複数の\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eが描画されてしまうのを防げることに加えて、以下の例のようにmatchする\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eがない場合のデフォルトの\u003ccode\u003e\u0026lt;Route\u0026gt;\u003c/code\u003eを作れたり、\u003ccode\u003epath\u003c/code\u003e中のパラメータを使った柔軟なルーティングができるようになります。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reacttraining.com/react-router/web/api/Switch\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003e\u0026lt;Switch\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://reacttraining.com/react-router/web/example/no-match\" rel=\"nofollow noopener\" target=\"_blank\"\u003eNo Match example\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://reacttraining.com/react-router/web/example/ambiguous-matches\" rel=\"nofollow noopener\" target=\"_blank\"\u003eAmbiguous Match\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"reduxとの併用\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#redux%E3%81%A8%E3%81%AE%E4%BD%B5%E7%94%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003eredux\u003c/code\u003eとの併用\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003eReact\u003c/code\u003eを使うとなると、\u003ccode\u003eredux\u003c/code\u003eも使いたい場合がほとんどだと思うんですが、下記のドキュメントによるとけっこうややこしいっぽいです。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reacttraining.com/react-router/web/guides/redux-integration\" rel=\"nofollow noopener\" target=\"_blank\"\u003eRedux integration\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e正直あまりよくわからなかったのでいろいろと不正確な可能性が高いですが、一応まとめると、\u003c/p\u003e\n\n\u003cp\u003eだいたいの場合は単に\u003ccode\u003eredux\u003c/code\u003eを使ってもうまくいく（その場合\u003ccode\u003eredux\u003c/code\u003eの\u003ccode\u003estore\u003c/code\u003eにはルーティングの情報はなく、それ以外のデータのみ管理することになる（？））。しかし、\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003econnect\u003c/code\u003eを使う場合\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e\u0026lt;Route component={Component}\u0026gt;\u003c/code\u003e以外の形で描画する場合\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eはうまくいかない（ルーティングの情報が変わっても、\u003ccode\u003estore\u003c/code\u003eが変わらない限り\u003ccode\u003eshouldComponentUpdate\u003c/code\u003eが呼ばれないから）。ただ、それらの場合にも以下のよう\u003ccode\u003ewithRouter\u003c/code\u003eを使ってあげればうまく動く。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e// NG\nexport default connect(mapStateToProps)(Something)\n\n// OK\nimport { withRouter } from 'react-router-dom'\nexport default withRouter(connect(mapStateToProps)(Something))\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eただし、上記のOKの場合でも、以下のようなことはできない。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003estore\u003c/code\u003eとルーティングのデータを同期したり、\u003ccode\u003estore\u003c/code\u003eからルーティングを操作したりする\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edispatch\u003c/code\u003eによってページ遷移をする\u003c/li\u003e\n\u003cli\u003eページ遷移についてもRedux devtoolのtime travel debuggingをする\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eどうしても上記のようなことをしたい場合は、\u003ca href=\"https://github.com/reacttraining/react-router/tree/master/packages/react-router-redux\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003ereact-router-redux\u003c/code\u003e\u003c/a\u003eを使えば良い。\u003c/p\u003e\n\n\u003cp\u003eとのことです。間違っているところをご指摘いただけるとありがたいです。とりあえずよくわからないので、気が向いたら\u003ccode\u003eredux\u003c/code\u003eとの組み合わせについても調べたいと思います。\u003c/p\u003e\n\n\u003cp\u003e以上、よろしくお願いします。\u003c/p\u003e\n","body":"# 概要\n\n`React`でルーティングをするためのライブラリである`react-router`のv4の基本的な使い方を覚えるために、簡単なwebページを作ってみます。\n\n`react-router`のv4というと、v2やv3から破壊的な変更があり、かなり使いやすくなったとの評判なのですが、私はv4以前の`react-router`を使ったことはなかったので、この記事には過去のversionとの比較という観点はありません。初めて使う人が、ルーティングの概念や`react-router`の使い方がわかるチュートリアルになれば良いなと思いながら書きました。\n\n方針としては、とにかくシンプルに小さなwebページを作ることにします。複雑な動作やサーバーとの通信はしませんし、cssもほぼ書きません。この記事は`react-router`を勉強し始めた当日に書いているので、間違っている内容があるかもしれません。ご指摘ください。\n\n# なぜ`react-router`を使う必要があるのか\n\n`React`でふつうにSPAを書くと、描画されるコンポーネントが変わって画面が遷移してもURLは変わらないと思います。つまり、URLとアプリの状態が関連づいていない状況になります。この２つを関連づけて、URLからアプリ内の特定の状態にアクセスできるようにしたり、逆にアプリ内での状態変化をURLに反映させたりすることをルーティングと言います。ルーティングをすることによって、ブラウザの戻るボタンが使えるようになったり、特定のURLを打ち込むことで特定のページに直接アクセスできるようになるというメリットがあります。\n\n`react`でルーティングをするためのデファクトのライブラリが`react-router`です。\n\n# 完成品\n\nキャラクターに人気投票するページを作りましょう。`React`のチュートリアルでよくあるCounterの例とルーティングを組み合わせたものと考えると良いと思います。以下にアニメgifを貼っておきますが、描画しているコンテンツとURLが連動しており、またブラウザの戻る/進むボタンが機能しているのがわかると思います。\n\n![4.gif](https://qiita-image-store.s3.amazonaws.com/0/159260/073adbb2-de6e-3466-05d5-26203358f5aa.gif)\n\nコードとデモのサイトは以下にあります。\n\n- [コード（github）](https://github.com/ymr-39/react-router-v4-tutorial)\n- [デモ](https://yam-net.github.io/react-router-v4-tutorial)\n\nにあります。\n\n# 環境\n\n- Mac OS X 10.12.3\n- node 7.10.0\n- npm 4.2.0\n- create-react-app 1.3.1\n\nライブラリのバージョンは以下で示す`package.json`を見てください。\n\n# とりあえずアプリの形をつくる\n\nとりあえず`React`が動く環境が必要なので、簡単のため`create-react-app`を使います（使いたくない人は以下適宜読みかえてください）。\n\n```shell-session\n// create-react-appをインストールしていない人は\n// npm i -g create-react-app\n\ncreate-react-app react-router-v4-tutorial\ncd react-router-v4-tutorial\n```\n\n`react-router`をインストールします。`react-router`にはいくつかのパッケージに分けられているのですが、[公式のgithub](https://github.com/ReactTraining/react-router)を見ると、ブラウザで動くページを書くには`react-router-dom`を使えばいいことがわかります。`react-router`はコアの機能を担っているのですが、[`react-router-dom`が`react-router`のexportも含めてexportしてくれる](https://github.com/ReactTraining/react-router/issues/4648)ようなので、`react-router`をインストールする必要はありません。\n\n```shell-session\nnpm install -S react-router-dom\n```\n\nこの時点で`package.json`は以下のようになっています。\n\n```json:package.json\n{\n  \"name\": \"react-router-v4-tutorial\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^15.6.1\",\n    \"react-dom\": \"^15.6.1\",\n    \"react-router-dom\": \"^4.1.1\"\n  },\n  \"devDependencies\": {\n    \"react-scripts\": \"1.0.7\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```\n\n`create-react-app`で生成された余計なファイルがいっぱいあるので、いったん`src`の中のファイルをすべて消して０から書くことにしましょう。\n\n```shell-session\ncd src\nrm *\ntouch index.js App.js\n```\n\nまずふつうに`index.js`を書きます。\n\n```index.js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  \u003cApp /\u003e,\n  document.getElementById('root')\n)\n```\n\n次に`App.js`です。今回は、すべてのコンポーネントを`App.js`の中に書くことにします。とりあえず、複雑なロジックは無視してルーティングの骨格の部分のみ書きましょう。Home, About, Friendsの3つのページを用意します。\n\n```text:App.js\nimport React, { Component } from 'react'\nimport { BrowserRouter, Route, Link } from 'react-router-dom'\n\nconst App = () =\u003e (\n  \u003cBrowserRouter\u003e\n    \u003cdiv\u003e\n      \u003cRoute exact path='/' component={Home} /\u003e\n      \u003cRoute path='/about' component={About} /\u003e\n      \u003cRoute path='/friends' component={Friends} /\u003e\n    \u003c/div\u003e\n  \u003c/BrowserRouter\u003e\n)\n\nconst Home = () =\u003e (\n  \u003cdiv\u003e\n    \u003ch2\u003eHome\u003c/h2\u003e\n    \u003cp\u003eWelcome to ようこそ\u003c/p\u003e\n  \u003c/div\u003e\n)\nconst About = () =\u003e (\n  \u003cdiv\u003e\n    \u003ch2\u003eAbout\u003c/h2\u003e\n    \u003cp\u003eフレンズに投票するページです\u003c/p\u003e\n  \u003c/div\u003e\n)\nconst Friends = () =\u003e (\n  \u003cdiv\u003e\n    \u003ch2\u003eFriends\u003c/h2\u003e\n    \u003cp\u003eここにフレンズのリストを書きます\u003c/p\u003e\n  \u003c/div\u003e\n)\n\nexport default App\n```\n\n実際にサイトを開いてみましょう。\n\n```shell-session\nnpm start\n```\n\nして、ブラウザで`localhost:3000`にアクセスします。ここで、まずは`\u003cHome\u003e`コンポーネントが開き、URLを`localhost:3000/about`に変更すると`\u003cAbout\u003e`が、さらに`localhost:3000/friends`に変更すると`\u003cFriends\u003e`が開くことが確認できると思います。これで、URLとページに表示する内容を対応させる、基本的なルーティングができました。\n\nこのルーティングを実現しているのが、`App.js`の中で呼ばれている`\u003cBrowserRouter\u003e`と`\u003cRoute\u003e`です。`\u003cBrowserRouter\u003e`の中にいくつか`\u003cRoute\u003e`を書き、`path`に対応させたいURLを、`component`に描画したいコンポーネントを渡します。ここで、`exact`を設定しない限り、`path`が入力したURLに前方一致していれば描画される（つまり`localhost:3000/`以下のすべてのURLに対して`\u003cHome\u003e`が描画されてしまう）ため、`\u003cHome\u003e`には`exact`を設定しています。\n\nもっと詳しい情報については以下のドキュメントをどうぞ。\n\n- [`\u003cBrowserRouter\u003e`](https://reacttraining.com/react-router/web/api/BrowserRouter)\n- [`\u003cRoute\u003e`](https://reacttraining.com/react-router/web/api/Route)\n\nさて、ここまでで完成したサイトはページの遷移の際にURLを直接打ち込まなければならず、明らかに不便です。それぞれのページに対するリンクを用意するために、`\u003cApp\u003e`を書き換えましょう。\n\n```diff:App.js\nconst App = () =\u003e (\n  \u003cBrowserRouter\u003e\n    \u003cdiv\u003e\n+     \u003cul\u003e\n+       \u003cli\u003e\u003cLink to='/'\u003eHome\u003c/Link\u003e\u003c/li\u003e\n+       \u003cli\u003e\u003cLink to='/about'\u003eAbout\u003c/Link\u003e\u003c/li\u003e\n+       \u003cli\u003e\u003cLink to='/friends'\u003eFriends\u003c/Link\u003e\u003c/li\u003e\n+     \u003c/ul\u003e\n\n+     \u003chr /\u003e\n+     \n      \u003cRoute exact path='/' component={Home} /\u003e\n      \u003cRoute path='/about' component={About} /\u003e\n      \u003cRoute path='/friends' component={Friends} /\u003e\n    \u003c/div\u003e\n  \u003c/BrowserRouter\u003e\n)\n```\n\n`\u003cLink\u003e`要素の`to`に遷移させたい`path`を設定しておくことで、クリックされたとき自動で遷移してくれるようになります。これについてもドキュメントを貼っておきます。\n\n- [`\u003cLink\u003e`](https://reacttraining.com/react-router/web/api/Link)\n\nここでページの動きを見てみましょう。\n\n![1.gif](https://qiita-image-store.s3.amazonaws.com/0/159260/40c7b4ea-2b06-2684-073f-5407d52f91d7.gif)\n\nリンクもうまく動いていますし、ブラウザの戻るボタンもちゃんと機能していますね。\n\n# 2段階のルーティング\n\n基本的なルーティングは以上で終わりです。もう少し複雑なことをしてみましょう。`friends`にアクセスしたときに、キャラクターのリストを表示して、かつそのリストからそれぞれのキャラクターのページに飛べるようにします。\n\nまずは、表示したいキャラクターのリストを用意します。\n\n```App.js\nconst FRIENDS = [\n  {\n    id: 'serval',\n    nameJa: 'サーバル',\n    nameEn: 'Serval Cat',\n    family: 'ネコ目ネコ科ネコ属'\n  },\n  {\n    id: 'raccoon',\n    nameJa: 'アライグマ',\n    nameEn: 'Common raccoon',\n    family: 'ネコ目アライグマ科アライグマ属'\n  },\n  {\n    id: 'fennec',\n    nameJa: 'フェネック',\n    nameEn: 'Fennec',\n    family: 'ネコ目イヌ科キツネ属'\n  }\n]\n\nconst friendById = id =\u003e FRIENDS.find(friend =\u003e friend.id === id)\n```\n\nそれぞれの要素に`id`を用意し、あとでこの`id`をそれぞれのキャラクターのページにアクセスする`path`として使うことにします。つまり、例えばキャラクター「サーバル」の`id`が`serval`になっているので、`localhost:3000/friends/serval`でサーバルのページに飛ぶようにするということです。また、`id`をもとにリストから対応するキャラクターのオブジェクトを探す`friendById`という関数を書いておきました。\n\nそれでは、`\u003cFriends\u003e`コンポーネントを書き換えます。\n\n```diff:App.js\nconst Friends = () =\u003e (\n  \u003cdiv\u003e\n    \u003ch2\u003eFriends\u003c/h2\u003e\n-   \u003cp\u003eここにフレンズのリストを書きます\u003c/p\u003e\n+   \u003cRoute exact path='/friends' component={FriendList} /\u003e\n+   \u003cRoute path='/friends/:id' component={Friend} /\u003e\n  \u003c/div\u003e\n)\n```\n\nここで、`\u003cRoute\u003e`で表示される`\u003cFriends\u003e`の中にさらにもう１段階`\u003cRoute\u003e`を作って表示をわける必要があるのですが、上記のようにそのままふつうに書けば問題ありません。まず、正確に`localhost:3000/friends`にアクセスした場合は、`\u003cFriendList\u003e`を表示し、さらにその後ろにキャラクターの`id`をつけた場合、対応するキャラクターのページを表示するようにしています。\n\nここで、`friends/:id`のようにコロンをつけることによって、その部分に入力された文字列を変数として受け取って描画できるコンポーネント内で使えるようになります。それでは、その`id`を使う部分も含めて、`\u003cFriendList\u003e`と`\u003cFriend\u003e`を書いていきます。\n\n```text:App.js\nconst FriendList = () =\u003e (\n  \u003cdiv\u003e\n    {FRIENDS.map(friend =\u003e (\n      \u003cli key={friend.id}\u003e\n        \u003cLink to={`/friends/${friend.id}`}\u003e{friend.nameJa}\u003c/Link\u003e\n      \u003c/li\u003e\n    ))}\n  \u003c/div\u003e\n)\n\nconst Friend = props =\u003e {\n  const { id } = props.match.params\n  const friend = friendById(id)\n\n  if (typeof friend === 'undefined')  {\n    return (\n      \u003cdiv\u003e\n        \u003cp\u003eFriends with id '{id}' does not exist.\u003c/p\u003e\n      \u003c/div\u003e\n    )\n  }\n\n\n  const containerStyle = { border: '1px gray solid', display: 'inline-block', padding: 10 }\n  const contentsStyle = { margin: 0 }\n\n  return (\n    \u003cdiv\u003e\n      \u003cdiv style={containerStyle}\u003e\n        \u003cp style={contentsStyle}\u003e{friend.family}\u003c/p\u003e\n        \u003ch1 style={contentsStyle}\u003e{friend.nameJa}\u003c/h1\u003e\n        \u003cp style={contentsStyle}\u003e{friend.nameEn}\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  )\n}\n```\n\nまず、`\u003cFriendList\u003e`では、配列`FRIENDS`を`map`して、それぞれのキャラクターのページへの`\u003cLink\u003e`を貼っています。\n\n`\u003cFriend\u003e`の動作は少し複雑です。まず、このコンポーネントでは`props`を受け取っています。`\u003cFriends\u003e`のコードを見ると、`\u003cFriend\u003e`はなにも`props`を受け取っていないように見えるのですが、実はすべての`\u003cRoute\u003e`は自動的にいくつかの`props`を受け取ります。\n\n- [Route props](https://reacttraining.com/react-router/web/api/Route/Route-props)\n\n今回は、その中の`match`を使います。実は、`match.params.id`の中に、`\u003cFriends\u003e`内で`\u003cFriend\u003e`にアクセスするときの`path`の`/friends/:id`の`:id`の部分の文字列が入っているのです。\n\nそのため、この受け取った`id`をもとに`friend`のオブジェクトを探し出し、それを描画に使うことで対応するキャラクターの画面を表示することができます。\n\nたとえば`/friends/serval`にアクセスしたときには、`\u003cFriend\u003e`内での`id`は`serval`になり、`friendById`によって`friend`には配列`FRIENDS`の要素である以下のオブジェクトが入ることになります。\n\n```\n{\n  id: 'serval',\n  nameJa: 'サーバル',\n  nameEn: 'Serval Cat',\n  family: 'ネコ目ネコ科ネコ属'\n}\n```\n\nコードを見ると、`render()`の内部で、上記のオブジェクトがうまく描画に使われていることがわかると思います。\n\nまた、\n\n```text:App.js\nif (typeof friend === 'undefined')  {\n  return (\n    \u003cdiv\u003e\n      \u003cp\u003eFriends with id '{id}' does not exist.\u003c/p\u003e\n    \u003c/div\u003e\n  )\n}\n```\n\nの部分は存在しない`id`にアクセスされたときのためのエラー処理です。例えば、ブラウザで`localhost:3000/dog`にアクセスすると、`FRIENDS`内に`id`が`dog`の要素がないことから`friend`が`undefined`になってしまうので、その際に別の画面を表示するようにしています。\n\nそれでは、ページを見てみましょう。\n\n![2.gif](https://qiita-image-store.s3.amazonaws.com/0/159260/5ab9b49d-5ee2-1f81-796d-0a9c23892d6d.gif)\n\nうまく動いています。\n\n# Reactの機能を使う\n\nここで終わっても良いのですが、冷静に考えてここまでは`React`の機能をなにも使っておらず、単にルーティングをして静的なコンポーネントを返しているだけです。せっかくなので、`React`を使って動的なページにしてみましょう。\n\n今回は、`\u003cFriendList\u003e`からキャラクターに投票できるようにして、各`\u003cFriend\u003e`のページで投票数を表示するようにします。\n\nまずは、`\u003cFriends\u003e`以下を書き換えます。ここで、`\u003cFriends\u003e`に投票数の状態を持たせたいため、既存の`\u003cFriends\u003e`を消して、関数ではなくクラスとして０から書き直すことにします。\n\n```text:App.js\nclass Friends extends Component {\n  constructor() {\n    super()\n    this.state = {}\n    this.handleVote = this.handleVote.bind(this)\n  }\n\n  componentWillMount() {\n    FRIENDS.forEach(friend =\u003e {\n      this.setState({\n        ...this.state,\n        [friend.id]: 0\n      })\n    })\n  }\n\n  handleVote(id) {\n    this.setState({\n      [id]: this.state[id] + 1\n    })\n  }\n\n  render() {\n    return (\n      \u003cdiv\u003e\n        \u003ch2\u003eFriends\u003c/h2\u003e\n        \u003cRoute exact path='/friends' render={props =\u003e \u003cFriendList handleVote={this.handleVote} /\u003e} /\u003e\n        \u003cRoute path='/friends/:id' render={props =\u003e \u003cFriend match={props.match} votes={this.state} /\u003e} /\u003e\n      \u003c/div\u003e\n    )\n  }\n}\n```\n\nかなり大きな変更があります。まず、`constructor()`と`componentWillMount()`内で`state`を初期化しています。とくに`componentWillMount()`内は複雑なコードに見えますが、冷静に見てみると、単に`state`を\n\n```\nthis.state = {\n  serval: 0,\n  raccoon: 0,\n  fennec: 0\n}\n```\n\nとしているのと同じことです（最初からそう書けという気もしますが、今後`FRIENDS`が増えてもコードの変更をしなくて良いようにしています）。この`state`は、各キャラクターへの投票数を表しています。また、イベントハンドラの`handleVote`で、投票に応じて`state`において対応するキャラクターの投票数を１増やすようにしています。\n\nさて、投票のボタンを`\u003cFriendList\u003e`に置いて、投票数を`\u003cFriend\u003e`内に表示したいので、それぞれ`handleVote`を`\u003cFriendList\u003e`に、`this.state`を`\u003cFriend\u003e`に渡したいです。ただ、上でも述べたように`\u003cRoute\u003e`には、`match`などデフォルトで渡される`props`があり、追加の`props`を渡すことができないようになっています（たぶん）。そのため、`\u003cRoute\u003e`を、\n\n```diff:App.js\n- \u003cRoute exact path='/friends' component={FriendList} /\u003e\n- \u003cRoute path='/friends/:id' component={Friend} /\u003e\n+ \u003cRoute exact path='/members' render={props =\u003e \u003cFriendList handleVote={this.handleVote} /\u003e} /\u003e\n+ \u003cRoute path='/members/:id' render={props =\u003e \u003cFriend match={props.match} votes={this.state} /\u003e} /\u003e\n```\n\nのように書き換えています。実は、`\u003cRoute\u003e`に描画するコンポーネントを渡すには`component`以外にも、`render`、`children`という方法があり、ここでは`render`を使っています。\n\n`render`には、「`match`などが含まれるデフォルトの`props`を引数にとって、描画したいコンポーネントを返す関数」を渡すことにより描画をします。`\u003cFriendList\u003e`ではデフォルトの`props`を使っていないことから`handleVote`のみを渡し、`\u003cFriend\u003e`では`match`を使うので`match`と投票数`this.state`を`votes`として渡しています。\n\nそれでは、`\u003cFriendList\u003e`と`\u003cFriend\u003e`を見ていきましょう。これらは、渡された`props`をうまく使ってあげれば良いだけなので小さな変更です。\n\n```diff:App.js\n- const FriendList = () =\u003e (\n+ const FriendList = props =\u003e (\n  \u003cdiv\u003e\n    {FRIENDS.map(friend =\u003e (\n      \u003cli key={fiend.id}\u003e\n        \u003cLink to={`/friends/${friend.id}`}\u003e{friend.nameJa}\u003c/Link\u003e\n+       \u003cbutton onClick={() =\u003e props.handleVote(friend.id)}\u003e+\u003c/button\u003e\n      \u003c/li\u003e\n    ))}\n  \u003c/div\u003e\n)\n\nconst Friend = props =\u003e {\n  const { id } = props.match.params\n  const friend = friendById(id)\n+ const vote = props.votes[id]\n\n  if (typeof friend === 'undefined')  {\n    return (\n      \u003cdiv\u003e\n        \u003cp\u003eFriends with id '{id}' does not exist.\u003c/p\u003e\n      \u003c/div\u003e\n    )\n  }\n\n  const containerStyle = { border: '1px gray solid', display: 'inline-block', padding: 10 }\n  const contentsStyle = { margin: 0 }\n\n  return (\n    \u003cdiv\u003e\n      \u003cdiv style={containerStyle}\u003e\n        \u003cp style={contentsStyle}\u003e{friend.family}\u003c/p\u003e\n        \u003ch1 style={contentsStyle}\u003e{friend.nameJa}\u003c/h1\u003e\n        \u003cp style={contentsStyle}\u003e{friend.nameEn}\u003c/p\u003e\n      \u003c/div\u003e\n+     \u003ch1\u003eVote: {vote}\u003c/h1\u003e\n    \u003c/div\u003e\n  )\n}\n```\n\nそれでは、ページの動きを見てみます。\n\n![3.gif](https://qiita-image-store.s3.amazonaws.com/0/159260/6b7b9900-0c53-c650-6c94-e428966b06eb.gif)\n\nということで、無事投票ができています。以上でこのページは完成とします。\n\n※今回は、簡単のため投票数を`\u003cFriends\u003e`コンポーネントで管理していますが、これだと`\u003cFriendList\u003e`で投票してから一旦違うページ（例えば`\u003cAbout\u003e`）に飛ぶと投票数の情報が失われてしまいます。この問題は、情報をさらに持ち上げて`\u003cApp\u003e`の`state`で管理するか、`redux`を使って`store`で管理するなどにより解決します。\n\n# 今回使っていないAPI\n\n`react-router`の機能のうち、今回使っていないものをいくつか紹介します。それぞれについて、公式のドキュメントと使用例を貼っていきます。\n\n## `\u003cRoute children={...}\u003e`\n\n`\u003cRoute\u003e`にコンポーネントを渡す方法で`component`と`render`を紹介しましたが、もう一つ`children`というやり方があります。使い方は`render`と同じのようですが、こちらは`\u003cRoute\u003e`がURLにmatchしないとき、`props.match`が`null`になるという違いがあるようです。\n\n- [`\u003cRoute\u003e` children: func](https://reacttraining.com/react-router/web/api/Route/children-func)\n\n## `\u003cNavLink\u003e`\n\n`\u003cNavLink\u003e`は`\u003cLink\u003e`と同じ働きをしますが、描画されているコンポーネントに対応するリンクにスタイリングをすることができます。今回作ったページでも、`\u003cApp\u003e`の中の`\u003cLink\u003e`を\n\n```\n\u003cul\u003e\n  \u003cli\u003e\u003cNavLink activeStyle={{ color: 'red' }} exact to='/'\u003eHome\u003c/NavLink\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cNavLink activeStyle={{ color: 'red' }} to='/about'\u003eAbout\u003c/NavLink\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cNavLink activeStyle={{ color: 'red' }} to='/friends'\u003eFriends\u003c/NavLink\u003e\u003c/li\u003e\n\u003c/ul\u003e\n```\n\nのように変更するだけで、現在のURLに対応するリンクをスタイリングしてくれます。\n\n- [`\u003cNavLink\u003e`](https://reacttraining.com/react-router/web/api/NavLink)\n\n## `\u003cRedirect\u003e`\n\n例えばログインしていないユーザーとログインしているユーザーで別のコンテンツを描画したいときとかに使えるっぽいです。\n\n- [`\u003cRedirect\u003e`](https://reacttraining.com/react-router/web/api/Redirect)\n- [Redirect Auth example](https://reacttraining.com/react-router/web/example/auth-workflow)\n\n## `\u003cSwitch\u003e`\n\n今回は複数の`\u003cRoute\u003e`を並べるとき単に\n\n```\n\u003cRoute ...\u003e\n\u003cRoute ...\u003e\n\u003cRoute ...\u003e\n```\n\nと書いていましたが、これを`\u003cSwitch\u003e`を使って\n\n```\n\u003cSwitch\u003e\n  \u003cRoute ...\u003e\n  \u003cRoute ...\u003e\n  \u003cRoute ...\u003e\n\u003c/Switch\u003e\n```\n\nと書くことができます。これによって、`\u003cRoute\u003e`が排他的に描画されるようになります。すなわち、URLが複数の`\u003cRoute\u003e`にmatchしている場合でも、ただ一つだけ一番上の`\u003cRoute\u003e`が描画されます。これによって、意図せず複数の`\u003cRoute\u003e`が描画されてしまうのを防げることに加えて、以下の例のようにmatchする`\u003cRoute\u003e`がない場合のデフォルトの`\u003cRoute\u003e`を作れたり、`path`中のパラメータを使った柔軟なルーティングができるようになります。\n\n- [`\u003cSwitch\u003e`](https://reacttraining.com/react-router/web/api/Switch)\n- [No Match example](https://reacttraining.com/react-router/web/example/no-match)\n- [Ambiguous Match](https://reacttraining.com/react-router/web/example/ambiguous-matches)\n\n# `redux`との併用\n\n`React`を使うとなると、`redux`も使いたい場合がほとんどだと思うんですが、下記のドキュメントによるとけっこうややこしいっぽいです。\n\n- [Redux integration](https://reacttraining.com/react-router/web/guides/redux-integration)\n\n正直あまりよくわからなかったのでいろいろと不正確な可能性が高いですが、一応まとめると、\n\nだいたいの場合は単に`redux`を使ってもうまくいく（その場合`redux`の`store`にはルーティングの情報はなく、それ以外のデータのみ管理することになる（？））。しかし、\n\n- `connect`を使う場合\n- `\u003cRoute component={Component}\u003e`以外の形で描画する場合\n\nはうまくいかない（ルーティングの情報が変わっても、`store`が変わらない限り`shouldComponentUpdate`が呼ばれないから）。ただ、それらの場合にも以下のよう`withRouter`を使ってあげればうまく動く。\n\n```\n// NG\nexport default connect(mapStateToProps)(Something)\n\n// OK\nimport { withRouter } from 'react-router-dom'\nexport default withRouter(connect(mapStateToProps)(Something))\n```\n\nただし、上記のOKの場合でも、以下のようなことはできない。\n\n- `store`とルーティングのデータを同期したり、`store`からルーティングを操作したりする\n- `dispatch`によってページ遷移をする\n- ページ遷移についてもRedux devtoolのtime travel debuggingをする\n\nどうしても上記のようなことをしたい場合は、[`react-router-redux`](https://github.com/reacttraining/react-router/tree/master/packages/react-router-redux)を使えば良い。\n\nとのことです。間違っているところをご指摘いただけるとありがたいです。とりあえずよくわからないので、気が向いたら`redux`との組み合わせについても調べたいと思います。\n\n以上、よろしくお願いします。\n","coediting":false,"comments_count":3,"created_at":"2017-06-27T15:36:55+09:00","group":null,"id":"b4ca1773580317e7112e","likes_count":309,"private":false,"reactions_count":0,"tags":[{"name":"JavaScript","versions":[]},{"name":"reactjs","versions":[]},{"name":"react-router","versions":[]}],"title":"react-router@v4を使ってみよう：シンプルなtutorial","updated_at":"2019-01-03T14:30:25+09:00","url":"https://qiita.com/muiscript/items/b4ca1773580317e7112e","user":{"description":"Go / Typescript / Ruby / shell script","facebook_id":"","followees_count":0,"followers_count":11,"github_login_name":"muiscript","id":"muiscript","items_count":14,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":159260,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/159260/profile-images/1539056316","team_only":false,"twitter_screen_name":null,"website_url":""},"page_views_count":null}