[{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003eGo 言語でコマンドラインツールを作ることができる Cobra というパッケージがあります。僕が最近愛用している hugo も採用したという非常に優れたパッケージです。\u003c/p\u003e\n\n\u003cp\u003eCobra\u003cbr\u003e\n\u003ca href=\"https://github.com/spf13/cobra\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/spf13/cobra\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e今回はこの Cobra を使って、２つの数字を指定すると足し算を行ってくれる go-keisan というコマンドラインツールを作ってみました。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"go-keisan-の仕様\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#go-keisan-%E3%81%AE%E4%BB%95%E6%A7%98\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ego-keisan の仕様\u003c/h3\u003e\n\n\u003cp\u003e本稿で作ろうとしている go-keisan の仕様はこんな感じ。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e//バージョン番号を表示\n\u0026gt;go-keisan version\n\n//使い方を説明\n\u0026gt;go-keisan help\n\n//サブコマンド add で足し算の結果を返す\n\u0026gt;go-keisan add 12 34\n46\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eではさっそく作ってみましょう。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"cobra-をゲット\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#cobra-%E3%82%92%E3%82%B2%E3%83%83%E3%83%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eCobra をゲット\u003c/h1\u003e\n\n\u003cp\u003eまず go get コマンドで Cobra をゲットします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ego get -v github.com/spf13/cobra/cobra\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"プロジェクトフォルダを作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%92%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eプロジェクトフォルダを作成\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003emkdir go-keisan\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"フォルダ構成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E6%A7%8B%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eフォルダ構成\u003c/h1\u003e\n\n\u003cp\u003eフォルダ構成は以下の通り。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ego-keisan/\n├ cmd/\n│ ├ root.go\n│ └ add.go\n└ go-keisan.go\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"go-keisango-を作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#go-keisango-%E3%82%92%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ego-keisan.go を作成\u003c/h1\u003e\n\n\u003cp\u003eまず最初に基本的な実行ファイルとなる go-keisan.go ファイルを作成します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"go\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ego-keisan.go\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\n\u003c/span\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\"go-keisan/cmd\"\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\n\u003c/span\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e:=\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRootCmd\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eExecute\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003enil\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"x\"\u003e\n        \u003c/span\u003e\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"x\"\u003e\n        \u003c/span\u003e\u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eExit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"cmdrootgo-を作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#cmdrootgo-%E3%82%92%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ecmd/root.go を作成\u003c/h1\u003e\n\n\u003cp\u003e次に root.go ファイルを作成します。version などの基本的なサブコマンドはこの中に記述します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"go\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eroot.go\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\n\u003c/span\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"s\"\u003e\"fmt\"\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\n    \u003c/span\u003e\u003cspan class=\"s\"\u003e\"github.com/spf13/cobra\"\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"s\"\u003e\"github.com/spf13/viper\"\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\n\u003c/span\u003e\u003cspan class=\"k\"\u003evar\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRootCmd\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ecobra\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003eUse\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"x\"\u003e   \u003c/span\u003e\u003cspan class=\"s\"\u003e\"go-keisan\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003eShort\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\"This tool is pretty cool.\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"x\"\u003e  \u003c/span\u003e\u003cspan class=\"s\"\u003e\"This tool is a great convenience.\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003eRun\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecobra\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\n    \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\n\u003c/span\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003ecobra\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eOnInitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003eRootCmd\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAddCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eversionCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\n\u003c/span\u003e\u003cspan class=\"k\"\u003evar\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eversionCmd\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ecobra\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003eUse\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"x\"\u003e   \u003c/span\u003e\u003cspan class=\"s\"\u003e\"version\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003eShort\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\"Print the version number of go-keisan\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"x\"\u003e  \u003c/span\u003e\u003cspan class=\"s\"\u003e`All software has versions. This is go-keisan's`\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003eRun\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecobra\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"x\"\u003e\n        \u003c/span\u003e\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"go-keisan v1.0\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"足し算の処理を作成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%B6%B3%E3%81%97%E7%AE%97%E3%81%AE%E5%87%A6%E7%90%86%E3%82%92%E4%BD%9C%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e足し算の処理を作成\u003c/h1\u003e\n\n\u003cp\u003e次に add というサブコマンドを実行する処理を記述します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"go\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ecmd/add.go\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\n\u003c/span\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"s\"\u003e\"fmt\"\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"s\"\u003e\"strconv\"\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\n    \u003c/span\u003e\u003cspan class=\"s\"\u003e\"github.com/spf13/cobra\"\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\n\u003c/span\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003eRootCmd\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAddCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaddCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\n\u003c/span\u003e\u003cspan class=\"k\"\u003evar\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eaddCmd\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ecobra\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003eUse\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"x\"\u003e   \u003c/span\u003e\u003cspan class=\"s\"\u003e\"add\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003eShort\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\"Calculator of addition.\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"x\"\u003e  \u003c/span\u003e\u003cspan class=\"s\"\u003e\"Calculator to perform the addition.\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"n\"\u003eRun\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecmd\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ecobra\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"x\"\u003e\n        \u003c/span\u003e\u003cspan class=\"k\"\u003evar\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"x\"\u003e\n        \u003c/span\u003e\u003cspan class=\"k\"\u003evar\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en2\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"x\"\u003e\n        \u003c/span\u003e\u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estrconv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAtoi\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\u003cspan class=\"x\"\u003e\n        \u003c/span\u003e\u003cspan class=\"n\"\u003en2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estrconv\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAtoi\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\u003cspan class=\"x\"\u003e\n        \u003c/span\u003e\u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"x\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"x\"\u003e\n    \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ビルド\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%93%E3%83%AB%E3%83%89\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eビルド\u003c/h1\u003e\n\n\u003cp\u003eいったんビルドします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ego build go-keisan.go\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"実行\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A1%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実行\u003c/h1\u003e\n\n\u003cp\u003e作成したツール go-keisan を実行してみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ego-keisan help\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e以下のように、ヘルプの内容が表示されます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/8e13bcf00649edd1447a9732d7f4166c2591ea9f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132343939352f31373962376634652d333338302d363763322d376135642d3532633233313330356161662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/8e13bcf00649edd1447a9732d7f4166c2591ea9f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132343939352f31373962376634652d333338302d363763322d376135642d3532633233313330356161662e706e67\" alt=\"002.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/124995/179b7f4e-3380-67c2-7a5d-52c231305aaf.png\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e次に足し算の処理を実行してみましょう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ego-keisan add 7 21\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e7 + 21 の計算結果である 28 が正しく表示されたはずです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/05a1a6ff3dcd971cee4080bb072347ea112cc8c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132343939352f61306434646163322d393338662d383161352d613462642d3837363736613839333934612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/05a1a6ff3dcd971cee4080bb072347ea112cc8c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132343939352f61306434646163322d393338662d383161352d613462642d3837363736613839333934612e706e67\" alt=\"004.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/124995/a0d4dac2-938f-81a5-a4bd-87676a89394a.png\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"おわりに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eおわりに\u003c/h1\u003e\n\n\u003cp\u003eこれで本稿は終わりです。\u003c/p\u003e\n\n\u003cp\u003eさて、今回作ったこの足し算ツールには実は大きな欠点があります。\u003cbr\u003e\nAtoi 関数は変換不能な文字列については 0 を返すので、例えば \u003ccode\u003ego-keisan add abcdefg 7\u003c/code\u003e のようにコマンドを打つと、エラーを吐かずに 7 という結果が返ってきてしまうのです。\u003cbr\u003e\n後で突っ込まれないよう念のため書きました。それではまた。\u003c/p\u003e\n","body":"#はじめに\n\nGo 言語でコマンドラインツールを作ることができる Cobra というパッケージがあります。僕が最近愛用している hugo も採用したという非常に優れたパッケージです。\n\nCobra\nhttps://github.com/spf13/cobra\n\n今回はこの Cobra を使って、２つの数字を指定すると足し算を行ってくれる go-keisan というコマンドラインツールを作ってみました。\n\n\n###go-keisan の仕様\n\n本稿で作ろうとしている go-keisan の仕様はこんな感じ。\n\n```\n//バージョン番号を表示\n\u003ego-keisan version\n\n//使い方を説明\n\u003ego-keisan help\n\n//サブコマンド add で足し算の結果を返す\n\u003ego-keisan add 12 34\n46\n```\n\nではさっそく作ってみましょう。\n\n#Cobra をゲット\n\nまず go get コマンドで Cobra をゲットします。\n\n```\ngo get -v github.com/spf13/cobra/cobra\n```\n\n\n#プロジェクトフォルダを作成\n\n```\nmkdir go-keisan\n```\n\n#フォルダ構成\n\nフォルダ構成は以下の通り。\n\n```\ngo-keisan/\n├ cmd/\n│ ├ root.go\n│ └ add.go\n└ go-keisan.go\n```\n\n#go-keisan.go を作成\n\nまず最初に基本的な実行ファイルとなる go-keisan.go ファイルを作成します。\n\n```go-keisan.go\npackage main\n\nimport \"go-keisan/cmd\"\n\nfunc main() {\n    if err := cmd.RootCmd.Execute(); err != nil {\n        fmt.Println(err)\n        os.Exit(-1)\n    }\n}\n```\n\n#cmd/root.go を作成\n\n次に root.go ファイルを作成します。version などの基本的なサブコマンドはこの中に記述します。\n\n```root.go\npackage cmd\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)\n\nvar RootCmd = \u0026cobra.Command{\n\tUse:   \"go-keisan\",\n\tShort: \"This tool is pretty cool.\",\n\tLong:  \"This tool is a great convenience.\",\n\tRun: func(cmd *cobra.Command, args []string) {\n\n\t},\n}\n\nfunc init() {\n\tcobra.OnInitialize()\n\tRootCmd.AddCommand(versionCmd)\n}\n\nvar versionCmd = \u0026cobra.Command{\n\tUse:   \"version\",\n\tShort: \"Print the version number of go-keisan\",\n\tLong:  `All software has versions. This is go-keisan's`,\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tfmt.Println(\"go-keisan v1.0\")\n\t},\n}\n\n```\n\n\n#足し算の処理を作成\n\n次に add というサブコマンドを実行する処理を記述します。\n\n\n```cmd/add.go\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nfunc init() {\n\tRootCmd.AddCommand(addCmd)\n}\n\nvar addCmd = \u0026cobra.Command{\n\tUse:   \"add\",\n\tShort: \"Calculator of addition.\",\n\tLong:  \"Calculator to perform the addition.\",\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tvar n1 int\n\t\tvar n2 int\n\t\tn1, _ = strconv.Atoi(args[0])\n\t\tn2, _ = strconv.Atoi(args[1])\n\t\tfmt.Println(n1 + n2)\n\t},\n}\n\n```\n\n#ビルド\n\nいったんビルドします。\n\n```\ngo build go-keisan.go\n```\n\n#実行\n\n作成したツール go-keisan を実行してみます。\n\n```\ngo-keisan help\n```\n\n以下のように、ヘルプの内容が表示されます。\n\n![002.png](https://qiita-image-store.s3.amazonaws.com/0/124995/179b7f4e-3380-67c2-7a5d-52c231305aaf.png)\n\n次に足し算の処理を実行してみましょう。\n\n```\ngo-keisan add 7 21\n```\n\n7 + 21 の計算結果である 28 が正しく表示されたはずです。\n\n![004.png](https://qiita-image-store.s3.amazonaws.com/0/124995/a0d4dac2-938f-81a5-a4bd-87676a89394a.png)\n\n\n\n\n#おわりに\n\nこれで本稿は終わりです。\n\nさて、今回作ったこの足し算ツールには実は大きな欠点があります。\nAtoi 関数は変換不能な文字列については 0 を返すので、例えば `go-keisan add abcdefg 7` のようにコマンドを打つと、エラーを吐かずに 7 という結果が返ってきてしまうのです。\n後で突っ込まれないよう念のため書きました。それではまた。\n","coediting":false,"comments_count":0,"created_at":"2016-08-05T21:25:28+09:00","group":null,"id":"eb518c0816addd69f353","likes_count":40,"private":false,"reactions_count":0,"tags":[{"name":"Go","versions":[]},{"name":"golang","versions":[]},{"name":"cli","versions":[]},{"name":"コマンドライン","versions":[]},{"name":"cobra","versions":[]}],"title":"CLI作成支援パッケージ Cobra を使い、Go 言語でコマンドラインツールを作ってみる","updated_at":"2016-08-08T15:11:31+09:00","url":"https://qiita.com/kent_ocean/items/eb518c0816addd69f353","user":{"description":"化学の会社で情シスやってます。\r\nC# / golang / python / 中国語","facebook_id":"","followees_count":80,"followers_count":97,"github_login_name":"kent-ocean","id":"kent_ocean","items_count":38,"linkedin_id":"","location":"Tokyo, Japan","name":"kent_ocean","organization":"","permanent_id":124995,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/124995/profile-images/1473716080","team_only":false,"twitter_screen_name":"kent_ocean","website_url":""},"page_views_count":null},{"rendered_body":"\u003cp\u003e来たる 2 月 4 日、ついに React 16.8 の正式版がリリースされます。この React 16.8 には、アルファ版が公開されて以来常に React ユーザーたちの関心をほしいままにしてきた\u003cstrong\u003eReact Hooks\u003c/strong\u003eが正式版となって追加されます。\u003c/p\u003e\n\n\u003cp\u003e\u003cfont color=\"#777777\"\u003e※追記：\u003cdel\u003eアメリカ時間で 2 月 5 日になっても React 16.8 がリリースされませんでした。事前情報で 2 月 4 日と言ってたのに……。いつになったらリリースされるのかはよく分かりません。\u003c/del\u003e2 月 6 日（日本時間）に React 16.8 がリリースされました！\u003c/font\u003e\u003c/p\u003e\n\n\u003cp\u003e熱心な React ユーザーの方は、当然 React Hooks の情報を常に追っており正式版がリリースされたらすぐにでも自分のコードで使いはじめる準備ができていることと思います。しかし、この記事をご覧の方々の中には React を使っているにも関わらず「\u003cstrong\u003eReact Hooks のことはよく分からない\u003c/strong\u003e」とか「\u003cstrong\u003e聞いたことくらいはあるけど今どうなっているのか知らない\u003c/strong\u003e」とか「\u003cstrong\u003e正式版が出てから調べればいいやと思っていた\u003c/strong\u003e」という方がもしかしたら居るかもしれません。\u003c/p\u003e\n\n\u003cp\u003eいよいよ正式版の登場と相成ってしまいましたから、皆さんはもう React Hooks から逃げることはできません\u003csup id=\"fnref1\"\u003e\u003ca href=\"#fn1\" rel=\"footnote\" title=\"一応補足しておくと、クラスコンポーネントなどの旧来の機能が React Hooks に取って代わられて廃止されるという予定は今のところありません。ですから、React Hooks を避けながら React を使い続けることも可能です。筆者はそういう人（/チーム）は React を使うのに向いていないという説を推しますが。\"\u003e1\u003c/a\u003e\u003c/sup\u003e。この記事では上記のような方々を対象として、\u003cstrong\u003eReact Hooks の正式版に備えてどんなフックがあるのかをすべて説明します\u003c/strong\u003e。アルファ版のうちは API の変化もありましたから、少し前にちょっと調べてみたけど今どうなっているのかは分からないというような人は要チェックです。なお、React はドキュメントの充実に力を入れており、React Hooks に関しても\u003ca href=\"https://reactjs.org/docs/hooks-reference.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e公式ドキュメント\u003c/a\u003eがちゃんと最新の状態に保たれています。ですから、英語が読める人はこの記事を読まずに公式ドキュメントを読むのもよいかもしれません。\u003c/p\u003e\n\n\u003cp\u003e記事中に登場するサンプルコードは\u003ca href=\"https://github.com/uhyo/react-hooks-sandbox/tree/review/src/review\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGitHub\u003c/a\u003eに置いてあります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"react-hooks-の概要\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#react-hooks-%E3%81%AE%E6%A6%82%E8%A6%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eReact Hooks の概要\u003c/h1\u003e\n\n\u003cp\u003e総ざらいというタイトルをつけた記事なので、一応 React Hooks について基礎から説明しておきます。React Hooks は、一言で言えば\u003cstrong\u003e関数コンポーネントから使える新しい API\u003c/strong\u003eです。これまで、関数コンポーネントは引数として props を受け取り、レンダリング結果を返り値で返すというインターフェースで定義され、ステートなどの複雑な機能を持たない単純なコンポーネントを作れるものとして提供されていました。初期には Stateless Function Component（状態なし関数コンポーネント）という用語が使われていたことからも分かる通り、もともと関数コンポーネントは、クラスコンポーネントが持つような\u003ccode\u003estate\u003c/code\u003eの機能や\u003ccode\u003ecomponentDidMount\u003c/code\u003eを始めとするライフサイクルメソッドを持ちませんでした。\u003c/p\u003e\n\n\u003cp\u003eReact Hooks によって、関数コンポーネントにこれらの機能を持たせることができるようになります。すなわち、従来はクラスコンポーネントでしか出来なかったことが関数コンポーネントでもできるようになるのです。ただ一つ注意していただきたいのは、\u003cstrong\u003eReact Hooks はクラスコンポーネントの API をただ移植したわけではない\u003c/strong\u003eということです。React Hooks の API は新しくデザインし直された API であり、従来の API の問題点が解消されています。例えば、フックの利用方法をただの関数呼び出しとすることによって、フックの合成（＝カスタムフックの作成）を容易にしています（カスタムフックについては\u003ca href=\"https://qiita.com/uhyo/items/27a83d9044945034c4da\" id=\"reference-0f2f674007e11fe1387f\"\u003e筆者の以前の記事\u003c/a\u003eが参考になるかもしれません）。\u003c/p\u003e\n\n\u003cp\u003eReact Hooks は、API 上は\u003ccode\u003euse\u003c/code\u003eから始まる名前のただの関数です。\u003ccode\u003ereact\u003c/code\u003eパッケージから\u003ccode\u003euseState\u003c/code\u003eや\u003ccode\u003euseEffect\u003c/code\u003eなどの関数がエクスポートされています。裏では React が今どのコンポーネントを処理しているかといった情報を保持しており、これらの関数はその情報に基づいて適切に動作します。現在のところ、React Hooks の API は関数コンポーネント専用であり、それ以外のシチュエーションで呼び出すことはできません。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"基本のフック\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%9F%BA%E6%9C%AC%E3%81%AE%E3%83%95%E3%83%83%E3%82%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e基本のフック\u003c/h1\u003e\n\n\u003cp\u003e先述のドキュメントでは、\u003ccode\u003euseState\u003c/code\u003e, \u003ccode\u003euseEffect\u003c/code\u003e, \u003ccode\u003euseContext\u003c/code\u003eの 3 つが基本的なフックとして挙げられています。それに倣ってここでもまずはこの 3 つを紹介します。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"usestate\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#usestate\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003euseState\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003euseState\u003c/code\u003eフックは、\u003cstrong\u003e関数コンポーネントにステートを持たせられる API\u003c/strong\u003e です。このフックを使うと、クラスコンポーネントにおける\u003ccode\u003ethis.state\u003c/code\u003eに値を保存しておくのと同じような感じで、コンポーネントに状態を持たせることができます。使い方は\u003ccode\u003econst [stateの値, state更新関数] = useState(state初期値);\u003c/code\u003eというのが基本です。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"usestate-のサンプル\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#usestate-%E3%81%AE%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003euseState のサンプル\u003c/h3\u003e\n\n\u003cp\u003eさっそくですが、\u003ccode\u003euseState\u003c/code\u003eの使用例を見てみましょう。よくある例ですが、ボタンを押すと数値が増えたり減ったりするやつです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003euseStateのサンプル\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e'react'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003euseState\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseStateSample\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e-\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e+\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこの\u003ccode\u003euseStateSample\u003c/code\u003eは関数コンポーネントで、特に props を受け取らずに render 内容を返すという従来どおりのインターフェースを持っています。ポイントは、その処理の中で\u003ccode\u003euseState\u003c/code\u003e関数を呼び出している点です。\u003c/p\u003e\n\n\u003cp\u003e今回は\u003ccode\u003ecount\u003c/code\u003eというステートを初期値\u003ccode\u003e0\u003c/code\u003eで用意しています。よって、\u003ccode\u003e\u0026lt;b\u0026gt;{count}\u0026lt;/b\u0026gt;\u003c/code\u003eのところは最初は 0 が表示されます。2 つのボタンをクリックすると、\u003ccode\u003esetCount\u003c/code\u003eが呼び出されるようになっています。\u003ccode\u003esetCount\u003c/code\u003eを呼び出した場合は渡した引数で\u003ccode\u003ecount\u003c/code\u003eステートが更新されます。つまり、\u003ccode\u003eUseStateSample\u003c/code\u003eの再\u003ccode\u003erender\u003c/code\u003e処理が発生し、その際\u003ccode\u003euseState\u003c/code\u003eによって返される\u003ccode\u003ecount\u003c/code\u003eの値が新しい値となっています。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"クラスコンポーネントとの比較\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eクラスコンポーネントとの比較\u003c/h3\u003e\n\n\u003cp\u003e上のサンプルと同じ処理を敢えて旧来のクラスコンポーネントで書くとこんな感じです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseStateSample\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eComponent\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"na\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003erender\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esetState\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"na\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e-\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esetState\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"na\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e+\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e関数コンポーネントと Hooks で書いた場合に比べて煩雑ですね。その要因としては、クラスコンポーネントでは\u003ccode\u003ethis.state\u003c/code\u003eがオブジェクトであることや、\u003ccode\u003ethis.setState\u003c/code\u003eがそのオブジェクトのうち一部をアップデートするような API 設計になっていることが挙げられます。React Hooks の API では\u003ccode\u003ecount\u003c/code\u003eというステートに対して\u003ccode\u003esetCount\u003c/code\u003eという専用の関数がセットで用意されますから、\u003ccode\u003e{count: count+1}\u003c/code\u003eのような余計なオブジェクト生成がなく直感的かつすっきりと書くことができています。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"複数のステートを使う\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A4%87%E6%95%B0%E3%81%AE%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%82%92%E4%BD%BF%E3%81%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e複数のステートを使う\u003c/h3\u003e\n\n\u003cp\u003e関数コンポーネントでは、\u003ccode\u003euseState\u003c/code\u003eを複数回呼ぶことで複数のステートを利用することができます。その場合、それぞれのステートに対して別々の更新関数が得られます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e複数のステートを用いる例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseStateSample2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esetLeft\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esetRight\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eleft\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"nx\"\u003esetLeft\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n          \u003cspan class=\"nx\"\u003esetRight\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eright\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        ←\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eright\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esetRight\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eright\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e+\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこの例ではコンポーネントは\u003ccode\u003eleft\u003c/code\u003eと\u003ccode\u003eright\u003c/code\u003eという 2 つのステートを持っています。それぞれのステートをアップデートするには対応する関数を用います。真ん中あたりに見えるように、複数のステートを同時に更新するには関数を全部呼びます。\u003c/p\u003e\n\n\u003cp\u003eこれを見ると、ステートが複雑になってきたときにステートの更新が一発でできずにたくさんの関数呼び出しが必要になってしまうという懸念があるかもしれません。その場合はステートの値を数値などではなくオブジェクトにして一発で更新するほうがよいことがあります。このやり方を支援するフックとして\u003ccode\u003euseReducer\u003c/code\u003eがありますので、あとで紹介します。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"関数によるステートの更新\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%96%A2%E6%95%B0%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%81%AE%E6%9B%B4%E6%96%B0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e関数によるステートの更新\u003c/h3\u003e\n\n\u003cp\u003eステートの更新関数（上の例での\u003ccode\u003esetCount\u003c/code\u003eなど）を呼ぶ場合、今までのサンプルでは新しいステートの値を渡していました。下記の例では、このボタンを押すと\u003ccode\u003ecount\u003c/code\u003eステートを 1 増やす、つまり新しい値として\u003ccode\u003ecount + 1\u003c/code\u003eをセットしていることが分かります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nx\"\u003ebutton\u003c/span\u003e \u003cspan class=\"nx\"\u003eonClick\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;+\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"err\"\u003e/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e実は、更新関数には\u003cstrong\u003e関数\u003c/strong\u003eを渡すことができます。その場合、これは現在のステートの値を受け取って新しいステートの値を返す関数として解釈されます。つまり、上の例はこのように書き換えることができます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nx\"\u003ebutton\u003c/span\u003e \u003cspan class=\"nx\"\u003eonClick\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;+\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"err\"\u003e/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこれは\u003ccode\u003esetCount\u003c/code\u003eに関数を渡すことで、「現在のステートを読んで、それに 1 を足した値を新しいステートの値とする」ということを指示しています。このように、次のステートの値が現在のステートに依存する場合（すなわち現在のステートから新しいステートを計算する場合）は関数を用いた更新が適しています。\u003c/p\u003e\n\n\u003cp\u003eその理由の 1 つは、この方法だとステートの更新ロジックを純粋関数に抜き出すことができることです。さらにもう 1 つの理由として、関数を使わないとコールバックが複数回呼ばれる場合に正しく対処できないことがあります。\u003c/p\u003e\n\n\u003cp\u003e例として、「1 回押すと onClick が 5 回発生するボタン」というコンポーネント\u003ccode\u003eSuperButton\u003c/code\u003eを作ってみました。このボタンを使うと 2 つの方法の違いが分かります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eSuperButton\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003eonClick\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003echildren\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eonclickHere\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eonClick\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"nx\"\u003eonClick\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eonclickHere\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003echildren\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseStateSample4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eSuperButton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e-\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nc\"\u003eSuperButton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eSuperButton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e+\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nc\"\u003eSuperButton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこの例では、\u003ccode\u003eSuperButton\u003c/code\u003eの onClick 関数で 2 種類の方法で書いたステートの更新を発生させています。既にお察しかと思いますが、\u003ccode\u003e() =\u0026gt; setCount(count - 1)\u003c/code\u003eのほうは、これが 5 回連続で呼び出されても\u003ccode\u003ecount\u003c/code\u003eは 1 だけ減ります。なぜなら、\u003ccode\u003esetCount(count - 1)\u003c/code\u003eで参照される\u003ccode\u003ecount\u003c/code\u003eは常にこの\u003ccode\u003eUseStateSample4\u003c/code\u003eコンポーネントがレンダリングされたときの\u003ccode\u003ecount\u003c/code\u003eだからです。\u003cbr\u003e\nそれに対し、\u003ccode\u003e()=\u0026gt; setCount(count =\u0026gt; count + 1)\u003c/code\u003eの場合は、これが 5 回呼び出されることで\u003ccode\u003ecount\u003c/code\u003eは 5 増えます。これは、この関数が呼び出されるたびに現在の\u003ccode\u003ecount\u003c/code\u003eの値が参照される（そしてそれに 1 を足した数値が新しい\u003ccode\u003ecount\u003c/code\u003eとなる）からです。\u003c/p\u003e\n\n\u003cp\u003eこのように、関数がワンパスで複数回呼び出されることを想定すると、関数を用いたステート更新（上の例で言えば後者）にしないと想定した動作にならないことがあります。繰り返しますが、現在のステートに依存して更新を行うならこのように関数をステート更新関数に渡しましょう。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"useeffect\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#useeffect\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003euseEffect\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003euseState\u003c/code\u003eと並んでよく使うであろうフックがこの\u003ccode\u003euseEffect\u003c/code\u003eフックです。これは\u003cstrong\u003eレンダリング後に行う処理を指定できるフック\u003c/strong\u003eです。クラスコンポーネントのライフサイクルでいえば、\u003ccode\u003ecomponentDidMount\u003c/code\u003e及び\u003ccode\u003ecomponentDidUpdate\u003c/code\u003eに\u003cstrong\u003eおおよそ\u003c/strong\u003e相当するものです（実際には多少違うのですが、それは後で説明します）。\u003c/p\u003e\n\n\u003cp\u003e例えば、以下の例は 1 秒ごとに表示されている値が 1 増えるコンポーネントです。現在表示している値をステートで管理するために、さっき紹介した\u003ccode\u003euseState\u003c/code\u003eと組み合わせて実装しています。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e'react'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003euseState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003euseEffect\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseEffectSample1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003euseEffect\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etimerId\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003esetTimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// クリーンアップ関数を返す\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eclearTimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etimerId\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      time: \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこのように、\u003ccode\u003euseEffect\u003c/code\u003eは 2 つの引数を取ります。返り値はありません。また、2 つ目の引数は省略可能です。1 つ目の引数は\u003cstrong\u003eコールバック関数\u003c/strong\u003eであり、\u003cstrong\u003eこの関数はコンポーネントのレンダリング完了時に呼ばれます\u003c/strong\u003e。最初のレンダリングはもちろん、再レンダリングが発生したあとにも呼ばれます。ただし、第 2 引数でコールバック関数を呼ぶタイミングを制御できます。第 2 引数は値の配列であり、\u003cstrong\u003e配列のいずれかの値が前回と変わったときのみコールバック関数を呼ぶ\u003c/strong\u003eという意味になります。省略した場合は無条件、つまりレンダリングの度に関数が呼ばれます\u003csup id=\"fnref2\"\u003e\u003ca href=\"#fn2\" rel=\"footnote\" title=\"第 2 引数の省略と、第 2 引数に[]を指定するのとは異なるという点に注意してください。第 2 引数を省略した場合はレンダリングごとにコールバック関数が呼ばれますが、[]を指定した場合は初回のレンダリングでのみコールバック関数が呼ばれます。\"\u003e2\u003c/a\u003e\u003c/sup\u003e。\u003c/p\u003e\n\n\u003cp\u003e上のサンプルでは、まず最初のレンダリングが完了したタイミングで\u003ccode\u003euseEffect\u003c/code\u003eに指定したコールバック関数が呼びだされます。それにより、1 秒後に\u003ccode\u003ecount\u003c/code\u003eステートが更新されます。それによりコンポーネントの再レンダリングが発生し、再び\u003ccode\u003euseEffect\u003c/code\u003eのコールバック関数が呼ばれます。この繰り返しにより、このコンポーネントは 1 秒ごとに数値が 1 ずつ増えていくコンポーネントとなります。\u003c/p\u003e\n\n\u003cp\u003e今回第 2 引数は\u003ccode\u003e[count]\u003c/code\u003eです。つまり、レンダリング終了時に、\u003ccode\u003ecount\u003c/code\u003eの値が前回のレンダリングと変わっていたら\u003ccode\u003euseEffect\u003c/code\u003eのコールバックを発火するということになります。今回の場合はステートがこれだけなので省略しても同じですが、他にもステートがある場合に余計な処理が発生しないようにする効果があります。\u003c/p\u003e\n\n\u003cp\u003eここで呼ばれているコールバック関数は、よく見ると関数を戻り値としています。これは\u003cstrong\u003eクリーンアップ関数\u003c/strong\u003eです。クリーンアップ関数を宣言した場合は、\u003cstrong\u003e次回のコールバックが呼ばれる前にクリーンアップ関数が呼ばれます\u003c/strong\u003e。また、\u003cstrong\u003eコンポーネントがアンマウントされる前にもクリーンアップ関数が呼ばれます\u003c/strong\u003e。要するに、描画時にコールバック関数が呼ばれた場合、その描画が消されるときに対応するクリーンアップ関数が呼ばれるということです。とても便利ですね。\u003c/p\u003e\n\n\u003cp\u003e上の例では、正確には初回レンダリング →\u003ccode\u003euseEffect\u003c/code\u003eのコールバック関数が呼ばれる →1 秒後にステートが変更されて再レンダリングが発生 →\u003cstrong\u003eクリーンアップ関数が呼ばれる\u003c/strong\u003e→\u003ccode\u003euseEffect\u003c/code\u003eのコールバック関数が再び呼ばれる　という流れをとっていることになります。ここではクリーンアップ関数で\u003ccode\u003eclearTimeout\u003c/code\u003eを呼んでいますが、このようにコールバック関数で発生した副作用の後始末をするのがクリーンアップ関数の主な役目です。このクリーンアップ関数は\u003ccode\u003esetTimeout\u003c/code\u003eの発火後に呼ばれた場合は意味がありませんが、コンポーネントがアンマウントされてまだ\u003ccode\u003esetTimeout\u003c/code\u003eが発火していない場合に、すでにアンマウントされたコンポーネントのステートを変更してしまうのを防ぐ意味があります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"usecontext\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#usecontext\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003euseContext\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003euseContext\u003c/code\u003eは、\u003cstrong\u003e指定したコンテキストの現在の値を得るフック\u003c/strong\u003eです。コンテキストというのは React 16.3 で搭載された新しいコンテキスト API によるものを指しています。\u003ccode\u003eReact.createContext\u003c/code\u003eで作成したコンテキストオブジェクトを\u003ccode\u003euseContext\u003c/code\u003eに渡すことで、そのコンテキストの現在の値を返り値で得ることができます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003euseContextのサンプル\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e'react'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003euseState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003euseContext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecreateContext\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eMyContext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ecreateContext\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{});\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseContextSample\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eMyContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eProvider\u003c/span\u003e \u003cspan class=\"na\"\u003evalue=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eIncrementButton\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nc\"\u003eMyContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eProvider\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eIncrementButton\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eincrementHandler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseContext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eMyContext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eincrementHandler\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e+\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこの例は相変わらずボタンを押すと数値が増えるという単純なサンプルですが、数値を増やすボタンを\u003ccode\u003eIncrementButton\u003c/code\u003eという別のコンポーネントに移しました。そうなると、ボタンを押したときの処理（\u003ccode\u003eUseContextSample\u003c/code\u003eのステートを変更する）を\u003ccode\u003eIncrementButton\u003c/code\u003eコンポーネントに伝える必要があります。一番単純な方法は props のひとつとしてその関数を渡すことですが、何段階も伝播させないといけないような場合には props を使うのは適していないことがあります。その場合はこの例のようにコンテキストを使って暗黙に値を伝播させます。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eIncrementButton\u003c/code\u003eを従来の API で書き直すとこんな感じです。コンポーネントのネストが無くなって綺麗に書けるのが嬉しいですね。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eIncrementButton\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eMyContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eConsumer\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eincrementHandler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eincrementHandler\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e+\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nc\"\u003eMyContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eConsumer\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"そのほかのフック\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%81%AE%E3%81%BB%E3%81%8B%E3%81%AE%E3%83%95%E3%83%83%E3%82%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eそのほかのフック\u003c/h1\u003e\n\n\u003cp\u003eここまでの 3 つがとても良く使いそうなフックでした。それ以外のフックも続けて紹介していきます。比較的よく使いそうなフックから解説していきます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"usereducer\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#usereducer\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003euseReducer\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003euseReducer\u003c/code\u003eは \u003cstrong\u003e\u003ccode\u003euseState\u003c/code\u003e の亜種\u003c/strong\u003eであり、ステートを宣言するフックです。\u003ccode\u003euseReducer\u003c/code\u003eは、ステートの初期状態に加えて\u003cstrong\u003ereducer と呼ばれる関数を渡します\u003c/strong\u003e。結果として、現在のステートに加えて、\u003cstrong\u003eステートを更新する関数の代わりに dispatch 関数が得られます\u003c/strong\u003e。この reducer や dispatch というのは Redux 用語としてよく知られていますので、Redux を触ったことがあるかたは馴染み深い概念でしょう。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003euseReducer\u003c/code\u003eによって作られたステートを更新する場合は、\u003ccode\u003edispatch\u003c/code\u003e関数に\u003cstrong\u003eアクション\u003c/strong\u003eを渡します。アクションというのはステートの更新指示を表す値で、別になんでも構いません。そのアクションを引数として、\u003ccode\u003euseReducer\u003c/code\u003eに渡した reducer が呼び出されます。reducer というのは関数であり、アクションと現在のステートを受け取って新しいステートを返します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003euseReducerの例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e'react'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003euseContext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003euseReducer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecreateContext\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eDispatchContext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ecreateContext\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{});\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ereducer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003eyear\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emonth\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"nx\"\u003eaction\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eaction\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"s1\"\u003e'increment'\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003emonth\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"na\"\u003eyear\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eyear\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"na\"\u003emonth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003eyear\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"na\"\u003emonth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003emonth\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"s1\"\u003e'decrement'\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003emonth\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"na\"\u003eyear\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eyear\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"na\"\u003emonth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003eyear\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"na\"\u003emonth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003emonth\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseReducerSample\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edispatch\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseReducer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ereducer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eyear\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003emonth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n          \u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eyear\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e年\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emonth\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003eヶ月\n        \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eDispatchContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eProvider\u003c/span\u003e \u003cspan class=\"na\"\u003evalue=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003edispatch\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eControlButtons\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nc\"\u003eDispatchContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eProvider\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eControlButtons\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edispatch\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseContext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eDispatchContext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003edispatch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'decrement'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e-\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003edispatch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'increment'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e+\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこの例はこのようにレンダリングされます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://gyazo.com/f31fbc5d6970c97e49e7ef79493774f2\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/4afb6bb65118db42d728482e574956850e493e80/68747470733a2f2f692e6779617a6f2e636f6d2f66333166626335643639373063393765343965376566373934393337373466322e706e67\" alt=\"Image from Gyazo\" data-canonical-src=\"https://i.gyazo.com/f31fbc5d6970c97e49e7ef79493774f2.png\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこの例のように、\u003cstrong\u003euseReducer\u003c/strong\u003eには 2 つの引数を渡します。1 つ目の引数は reducer で、2 つ目の引数は初期状態です。今回\u003ccode\u003euseReducer\u003c/code\u003eで宣言するステートは\u003ccode\u003eyear\u003c/code\u003eと\u003ccode\u003emonth\u003c/code\u003eという 2 つのプロパティを持ったオブジェクトです。\u003ccode\u003e+\u003c/code\u003eボタンと\u003ccode\u003e-\u003c/code\u003eボタンを押すと、月が 1 つ増えます。12 ヶ月になると年が 1 つ増えて月が 0 に戻ります。（あくまでサンプルなので、年とか 12 で割って計算しろよという批判は受け付けません。）\u003c/p\u003e\n\n\u003cp\u003eボタンが押されたときのロジックが\u003ccode\u003ereducer\u003c/code\u003e関数にまとまっていることが分かりますね。\u003ccode\u003ereducer\u003c/code\u003eの第 1 引数が今の状態で、第 2 引数がアクション（単純な例なので今回は文字列）です。そして、\u003ccode\u003euseReducer\u003c/code\u003eにより宣言されたステートの更新は、\u003ccode\u003edispatch\u003c/code\u003e関数にアクションを渡すことで行います。\u003ccode\u003edispatch\u003c/code\u003eを子コンポーネントである\u003ccode\u003eControlButtons\u003c/code\u003eに渡すのは先ほど紹介した\u003ccode\u003euseContext\u003c/code\u003eを使いました。\u003c/p\u003e\n\n\u003cp\u003e今回のポイントは、\u003ccode\u003e+\u003c/code\u003eボタンを押すと\u003ccode\u003eyear\u003c/code\u003eと\u003ccode\u003emonth\u003c/code\u003eが両方同時に変化する可能性があるということです。このような複雑な変化をアクションという抽象的な命令で表すことによって、ステートを変化させる側（\u003ccode\u003edispatch\u003c/code\u003eを呼び出す側）の単純化とステート変更ロジックの分離を同時に達成しています。\u003ccode\u003euseReducer\u003c/code\u003eを用いて色々な状態をひとまとめに宣言する場合、色々な子コンポーネントが\u003ccode\u003edispatch\u003c/code\u003eを用いて状態を変化させるはずですから、この例のように\u003ccode\u003euseContext\u003c/code\u003eと組み合わせて\u003ccode\u003edispatch\u003c/code\u003e関数を子コンポーネントたちに伝えるのが特に適しています。ステートの更新はすべて\u003ccode\u003edispatch\u003c/code\u003eを通じて行うため、\u003ccode\u003edispatch\u003c/code\u003e関数ひとつ伝えれば十分であるというのも嬉しい点です。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"関数によるステートの初期化\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%96%A2%E6%95%B0%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e関数によるステートの初期化\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003euseReducer\u003c/code\u003eの第 2 引数に初期ステートを渡す代わりに、\u003cstrong\u003e関数\u003c/strong\u003eを用いてステートを初期化することができます。この場合、\u003ccode\u003euseReducer\u003c/code\u003eの第 3 引数に初期化関数を渡します。また、第 2 引数の意味が変わります。渡した初期化関数の引数として\u003ccode\u003euseReducer\u003c/code\u003e第 2 引数が渡されます。この機能は、ステートの初期化ロジックを別の関数として定義したい場合などに便利です。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003euseReducerの第3引数の例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ereducer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003eyear\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emonth\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"nx\"\u003eaction\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eaction\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"s1\"\u003e'increment'\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003emonth\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"na\"\u003eyear\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eyear\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"na\"\u003emonth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003eyear\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"na\"\u003emonth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003emonth\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"s1\"\u003e'decrement'\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003emonth\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"na\"\u003eyear\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eyear\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"na\"\u003emonth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003eyear\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"na\"\u003emonth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003emonth\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003einit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003einitialMonth\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e({\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eyear\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003emonth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003einitialMonth\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseReducerSample2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003einitialMonth\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edispatch\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseReducer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ereducer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003einitialMonth\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003einit\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n          \u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eyear\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e年\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emonth\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003eヶ月\n        \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eDispatchContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eProvider\u003c/span\u003e \u003cspan class=\"na\"\u003evalue=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003edispatch\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eControlButtons\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nc\"\u003eDispatchContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eProvider\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこの例では、ステートの初期化関数\u003ccode\u003einit\u003c/code\u003eを定義して\u003ccode\u003euseReducer\u003c/code\u003eの第 3 引数に渡しました。このコンポーネントを\u003ccode\u003e\u0026lt;UseReducerSample2 initialMonth={10} /\u0026gt;\u003c/code\u003eのように使うと、「0 年 10 ヶ月」の表示からスタートします。このように、第 2 引数を初期ステートではなくステートの元となる値にして、第 3 引数に渡した\u003ccode\u003einit\u003c/code\u003e関数でそれをステートに変換するという方式をとっています。\u003c/p\u003e\n\n\u003cp\u003eこの場合は第 2 引数を\u003ccode\u003e{year: 0, month: initialMonth}\u003c/code\u003eとするという手もありますが、初期ステートがコンポーネントの中で定義されているのはどうも微妙に思えます。そういう時に第 3 引数を使いましょう。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"usememo\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#usememo\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003euseMemo\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003euseMemo\u003c/code\u003eは、その名の通り\u003cstrong\u003e値のメモ化に使えるフック\u003c/strong\u003eです。第 1 引数に値を計算する関数を、第 2 引数に計算される値が依存する値の一覧を渡します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003euseMemoの例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e'react'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003euseMemo\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseMemoSample\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseMemo\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        1 + … + n = \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eここで定義した\u003ccode\u003eUseMemoSample\u003c/code\u003eは、1 から指定した値までの和を表示するという意味不明なコンポーネントです。しかも、その和は for ループを回して計算します。\u003ccode\u003e\u0026lt;UseMemoSample n={1000} /\u0026gt;\u003c/code\u003eのように使うと\u003ccode\u003e1 + … + 1000 = 500500\u003c/code\u003eと表示します。\u003c/p\u003e\n\n\u003cp\u003eこの例はともかく、ループとか回す処理を render の中にベタ書きすると、レンダリングが行われるたびにそれが計算されることになります。計算結果をメモ化したい、すなわち以前計算した結果が再利用できるときは再利用したい、という場合に\u003ccode\u003euseMemo\u003c/code\u003eが役に立ちます。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003euseMemo\u003c/code\u003eの第 1 引数は、値を計算する関数を渡します。それ自身に引数はありませんが、props の値などを使用しても構いません。その関数の返り値が\u003ccode\u003euseMemo\u003c/code\u003eの返り値となります。この関数が呼び出されるのは値の計算が必要となったときです。つまり、初回のレンダリング時および再計算が必要となったときに関数が呼び出されます。\u003ccode\u003euseMemo\u003c/code\u003eは以前の計算の結果を覚えており、再計算が必要ない場合は渡した関数は呼び出されず、以前の計算の結果が返されます。\u003c/p\u003e\n\n\u003cp\u003e再計算がいつ必要かは\u003ccode\u003euseMemo\u003c/code\u003eの第 2 引数で指定します。これは\u003ccode\u003euseEffect\u003c/code\u003eの第 2 引数と同じで、ここに渡した値のいずれかが変化したときに再計算が行なわれます。今回の場合は計算結果は\u003ccode\u003en\u003c/code\u003eに依存しているため、第 2 引数に\u003ccode\u003e[n]\u003c/code\u003eを渡す必要があります。これにより、\u003ccode\u003en\u003c/code\u003eが変化したとき再計算が行なわれるようになります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"usecallback\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#usecallback\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003euseCallback\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003euseCallback\u003c/code\u003eは\u003ccode\u003euseMemo\u003c/code\u003eの亜種です。簡潔に言えば、\u003ccode\u003euseCallback(fn, arr)\u003c/code\u003eは\u003ccode\u003euseMemo(()=\u0026gt; fn, arr)\u003c/code\u003eと同じです。つまり、\u003ccode\u003euseCallback\u003c/code\u003eは計算の必要ない値をメモ化するときに便利なフックです。\u003c/p\u003e\n\n\u003cp\u003e計算が必要ないのにメモ化とはどういうことかとお思いかもしれませんが、\u003ccode\u003euseCallback\u003c/code\u003eという名前が示唆するとおり、これは\u003cstrong\u003e関数をメモ化するのに便利\u003c/strong\u003eです。ポイントは、\u003cstrong\u003e\u003ccode\u003e()=\u0026gt; { ... }\u003c/code\u003eのような関数式は毎回新しい関数オブジェクトを作る\u003c/strong\u003eという点です。\u003c/p\u003e\n\n\u003cp\u003e以下に\u003ccode\u003euseContext\u003c/code\u003eのサンプルを再掲します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseContextSample\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eMyContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eProvider\u003c/span\u003e \u003cspan class=\"na\"\u003evalue=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eIncrementButton\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nc\"\u003eMyContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eProvider\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eここで\u003ccode\u003eMyContext.Provider\u003c/code\u003eの prop として\u003ccode\u003e()=\u0026gt; setCount(count =\u0026gt; count+1)\u003c/code\u003eという関数を渡しています。これは関数式なので、\u003ccode\u003eUseContextSample\u003c/code\u003eがレンダリングされるたびに新しい関数オブジェクトが作られてそれが\u003ccode\u003eMyContext.Provider\u003c/code\u003eに渡されます。実はこれは良くありません。なぜなら、コンテキストに渡された値が変化するたびにそのコンテキストの値を使用するコンポーネントは全部再描画されるため、上の例で\u003ccode\u003eMyContext\u003c/code\u003eを使用するコンポーネントが毎回再描画されてしまうからです。\u003c/p\u003e\n\n\u003cp\u003eこういう時は\u003ccode\u003euseCallback\u003c/code\u003eの出番です。以下のようにすることで再描画を防ぐことができます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003euseCallbackのサンプル\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e'react'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003euseState\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003euseContext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003euseCallback\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecreateContext\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eMyContext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ecreateContext\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{});\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseCallbackSample\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eupdateCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseCallback\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esetCount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"p\"\u003e[]);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eMyContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eProvider\u003c/span\u003e \u003cspan class=\"na\"\u003evalue=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eupdateCount\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eIncrementButton\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nc\"\u003eMyContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eProvider\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eIncrementButton\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ememo\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eincrementHandler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseContext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eMyContext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eincrementHandler\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e+\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこの例では、\u003ccode\u003eMyContext.Provider\u003c/code\u003eに渡す関数を\u003ccode\u003euseCallback\u003c/code\u003eを用いてメモ化しています。第 2 引数が\u003ccode\u003e[]\u003c/code\u003eということは、一度初期化された後は\u003ccode\u003eupdateCount\u003c/code\u003eは毎回同一の関数オブジェクトとなります。よって、\u003ccode\u003eMyContext.Provider\u003c/code\u003eの値は変化していない扱いとなり、\u003ccode\u003eIncrementButton\u003c/code\u003eは再描画されなくなります。\u003c/p\u003e\n\n\u003cp\u003eただし、\u003ccode\u003eIncrementButton\u003c/code\u003eが\u003ccode\u003eReact.memo\u003c/code\u003eで囲うように変更されている点に注意してください。これはフックではないので詳細は省きますが、親の\u003ccode\u003eUseCallbackSample\u003c/code\u003eが再描画されても自動的に\u003ccode\u003eIncrementButton\u003c/code\u003eが再描画しないようにする効果があります。この 2 つの施策により\u003ccode\u003eIncrementButton\u003c/code\u003eが再描画される要因が無くなります。このように\u003ccode\u003euseCallback\u003c/code\u003e（や\u003ccode\u003euseMemo\u003c/code\u003e）は最適化に利用することができます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"useref\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#useref\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003euseRef\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003euseRef\u003c/code\u003eは、\u003cstrong\u003eref オブジェクトを作って返すフック\u003c/strong\u003eです。この ref オブジェクトは\u003ccode\u003eReact.createRef\u003c/code\u003eを使って作ることができるオブジェクトのことです。\u003ccode\u003euseRef\u003c/code\u003eは、同じ呼び出しに対しては同じ ref オブジェクトを返します。ref オブジェクトは\u003ccode\u003ecurrent\u003c/code\u003eプロパティにその中身が入っています。\u003ccode\u003ecurrent\u003c/code\u003eの初期値は\u003ccode\u003euseRef\u003c/code\u003eの引数で指定することができます。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003euseRef\u003c/code\u003eのひとつの用途は、コンポーネントの\u003ccode\u003eref\u003c/code\u003e属性に渡すためのrefオブジェクトを作ることです。\u003ccode\u003euseEffect\u003c/code\u003eと組み合わせた例を作ってみました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003euseRefのサンプル\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e'react'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003euseEffect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseRefSample\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003euseEffect\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003erafid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eloop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"c1\"\u003e// 現在時刻を表示\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enow\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nb\"\u003eDate\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etextContent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetHours\u003c/span\u003e\u003cspan class=\"p\"\u003e()).\u003c/span\u003e\u003cspan class=\"nx\"\u003epadStart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"s1\"\u003e'0'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e)}\u003c/span\u003e\u003cspan class=\"s2\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetMinutes\u003c/span\u003e\u003cspan class=\"p\"\u003e()).\u003c/span\u003e\u003cspan class=\"nx\"\u003epadStart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'0'\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u003c/span\u003e\u003cspan class=\"s2\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetSeconds\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003epadStart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'0'\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u003c/span\u003e\u003cspan class=\"s2\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetMilliseconds\u003c/span\u003e\u003cspan class=\"p\"\u003e()).\u003c/span\u003e\u003cspan class=\"nx\"\u003epadStart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'0'\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003erafid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erequestAnimationFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eloop\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eloop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecancelAnimationFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erafid\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e \u003cspan class=\"na\"\u003eref=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこのコンポーネントはこのような表示となります。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://gyazo.com/e4680d4d4038e26962d72a0fe09cd619\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/49667b56a0e9211bd1c557bbb648340856e8e7a6/68747470733a2f2f692e6779617a6f2e636f6d2f65343638306434643430333865323639363264373261306665303963643631392e706e67\" alt=\"Image from Gyazo\" data-canonical-src=\"https://i.gyazo.com/e4680d4d4038e26962d72a0fe09cd619.png\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこれは、\u003ccode\u003erequestAnimationFrame\u003c/code\u003eを用いてリアルタイムで現在時刻をミリ秒単位で表示するコンポーネントです。このような高頻度な更新をステートを用いて行うのは負荷が高そうな気がするので\u003ccode\u003euseEffect\u003c/code\u003eを用いて直接 DOM 操作を行っています。\u003c/p\u003e\n\n\u003cp\u003e直接 DOM 操作を行うには、レンダリング後に生の DOM ノードを取得する方法があります。その方法がコンポーネントの\u003ccode\u003eref\u003c/code\u003e属性（\u003ccode\u003e\u0026lt;p ref={displayAreaRef} /\u0026gt;\u003c/code\u003e）です。この\u003ccode\u003eref\u003c/code\u003e属性に渡すための ref オブジェクトを\u003ccode\u003euseRef()\u003c/code\u003eフックで作っています。\u003ccode\u003eref\u003c/code\u003e属性の効果により、レンダリング時に ref オブジェクトの\u003ccode\u003ecurrent\u003c/code\u003eプロパティに DOM ノードがセットされます。この例では\u003ccode\u003euseEffect\u003c/code\u003eのハンドラの中からこの情報を使用しています。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"レンダリング間変数として-useref-を使用する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0%E9%96%93%E5%A4%89%E6%95%B0%E3%81%A8%E3%81%97%E3%81%A6-useref-%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eレンダリング間変数として useRef を使用する\u003c/h3\u003e\n\n\u003cp\u003e従来、ref オブジェクトというのは専ら、上記の例のように DOM オブジェクトへの参照を得るのに使われてきました。しかし、フックの世界においては\u003ccode\u003euseRef\u003c/code\u003eや ref オブジェクトはその便利さをさらに増しています。\u003cbr\u003e\nポイントは、\u003ccode\u003euseRef\u003c/code\u003eが返すオブジェクトはレンダリング間で毎回同じであるということです。特に\u003ccode\u003euseEffect\u003c/code\u003eを使用する場合に、レンダリング間で情報を共有する場合に使用可能です。\u003c/p\u003e\n\n\u003cp\u003e例えば、\u003ccode\u003ecomponentDidUpdate\u003c/code\u003eは「前回の props」と「前回の state」を参照可能でしたが\u003ccode\u003euseEffect\u003c/code\u003eにはその機能はありませんでした。前回の props などを利用したい場合は、その情報を自分で\u003ccode\u003euseRef\u003c/code\u003eに保存しておくことになります。\u003c/p\u003e\n\n\u003cp\u003e以下の例は、自分が再レンダリングされた回数を覚えているコンポーネントです。（本当はこういう用途で\u003ccode\u003euseEffect\u003c/code\u003eを使わずにロジックで何とかしたほうがよいですが。というか再レンダリングされた回数が必要なのってどんな場面なのでしょうか。）\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseRefSample2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erenderCountRef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003euseEffect\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003erenderCountRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etextContent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erenderCountRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      このコンポーネントは\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e \u003cspan class=\"na\"\u003eref=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n      回描画されました。\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこれと同じものをクラスコンポーネントで書くとこんな感じです。\u003ccode\u003euseRef\u003c/code\u003eで得た ref オブジェクトがおおよそコンポーネントの（ステートではない）プロパティに対応していることが分かると思います。それにしても、やっぱりフックを用いた関数コンポーネントのほうがシンプルでいいですね（場合にもよりますが）。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseRefSample2\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eComponent\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econstructor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eprops\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eprops\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003edisplayArea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecreateRef\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003erenderCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003erender\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        このコンポーネントは\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e \u003cspan class=\"na\"\u003eref=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003edisplayArea\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n        回描画されました。\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003e_effect\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003erenderCount\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003edisplayArea\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etextContent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003erenderCount\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecomponentDidMount\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003e_effect\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecomponentDidUpdate\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003e_effect\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"uselayouteffect\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#uselayouteffect\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003euseLayoutEffect\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003euseLayoutEffect\u003c/code\u003eは \u003cstrong\u003e\u003ccode\u003euseEffect\u003c/code\u003eの亜種\u003c/strong\u003eです。基本的な使い方は\u003ccode\u003euseEffect\u003c/code\u003eと同じですが、\u003cstrong\u003eコールバック関数が呼ばれるタイミングが違います\u003c/strong\u003e。具体的には、\u003ccode\u003euseEffect\u003c/code\u003eはレンダリングの結果が描画された後に呼び出されますが、\u003ccode\u003euseLayoutEffect\u003c/code\u003eはレンダリング結果がDOMに反映された後描画される前に呼び出されます。\u003c/p\u003e\n\n\u003cp\u003eレンダリング結果が描画される前にコールバックの処理が走るという特徴のため、\u003cstrong\u003e\u003ccode\u003euseLayoutEffect\u003c/code\u003eの処理はレンダリングをブロックし、レンダリング結果がユーザーに見えるのが遅延されます\u003c/strong\u003e。ですから、\u003cstrong\u003eその必要がない場合は\u003ccode\u003euseEffect\u003c/code\u003eを使うべき\u003c/strong\u003eであるとされています。ちなみに、クラスコンポーネントの\u003ccode\u003ecomponentDidMount\u003c/code\u003eや\u003ccode\u003ecomponentDidUpdate\u003c/code\u003eのタイミングはこの\u003ccode\u003euseLayoutEffect\u003c/code\u003eと同じです。\u003ccode\u003euseEffect\u003c/code\u003eは、レンダリングをブロックしなくなったという点でこれらの進化形であると言えるでしょう。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003euseLayoutEffect\u003c/code\u003eを使う例を挙げてみます。つい先ほどの\u003ccode\u003euseRef\u003c/code\u003eの例を思い出してください。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003euseRefの例（再掲）\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseRefSample2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erenderCountRef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003euseEffect\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003erenderCountRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etextContent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erenderCountRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      このコンポーネントは\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e \u003cspan class=\"na\"\u003eref=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n      回描画されました。\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこれの返り値を見てみると、b要素の中身は最初空です。\u003ccode\u003euseEffect\u003c/code\u003eのコールバックによってこの中身が埋められますが、ここに問題があります。\u003ccode\u003euseEffect\u003c/code\u003eのコールバックはレンダリングが描画後に呼び出されるということは、この中身が空の状態が一瞬ユーザーに見えてしまうのです。実際、下の画像のような描画が表示されてしまいます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://gyazo.com/731e1fbba22fbfd79f3173ddedd1dd86\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/a95db09a98d0ed44aefd3806d5db9d4e9e72e9f5/68747470733a2f2f692e6779617a6f2e636f6d2f37333165316662626132326662666437396633313733646465646431646438362e706e67\" alt=\"Image from Gyazo\" data-canonical-src=\"https://i.gyazo.com/731e1fbba22fbfd79f3173ddedd1dd86.png\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003euseLayoutEffect\u003c/code\u003eを使用するように書き換えることでこの現象を回避できます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003euseLayoutEffectの例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e'react'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003euseLayoutEffect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseLayoutEffectSample\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erenderCountRef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003euseLayoutEffect\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003erenderCountRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etextContent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erenderCountRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      このコンポーネントは\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eb\u003c/span\u003e \u003cspan class=\"na\"\u003eref=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n      回描画されました。\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"usedebugvalue\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#usedebugvalue\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003euseDebugValue\u003c/h2\u003e\n\n\u003cp\u003eこれが恐らく一番新しいフックで、React Hooksを昔は追っていたという方は知らないかもしれません。その名の通り、これはデバッグに使えるフックです。具体的には、\u003cstrong\u003eカスタムフックのデバッグ情報をReactの開発者ツール用拡張機能に表示させることができます\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003eこれは先ほどの「レンダリング回数を覚えているコンポーネント」をベースにした例です。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003euseDebugValueの例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e'react'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003euseEffect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003euseDebugValue\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRenderCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erenderCountRef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003euseDebugValue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e`このコンポーネントは\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003erenderCountRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e回再描画されました`\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003euseEffect\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003erenderCountRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseDebugValueSample\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003euseRenderCount\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003eこのコンポーネントを開発者ツールで見ると再描画数が表示されます\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eここで定義されている\u003ccode\u003euseRenderCount\u003c/code\u003e関数はカスタムフックです。カスタムフックについては\u003ca href=\"https://qiita.com/uhyo/items/27a83d9044945034c4da\"\u003e筆者の以前の記事\u003c/a\u003eに譲りますが、要するに名前が\u003ccode\u003euse\u003c/code\u003eで始まるただの関数です。普通は上の例のように、いくつかのフック呼び出しをまとめて関数にしたものがカスタムフックです。ただの関数ということは、あるコンポーネントから\u003ccode\u003euseRenderCount\u003c/code\u003eカスタムフックを呼び出すのは、その中身に書かれているフックを全部呼び出すのと同じです。何も特殊なことはありません。\u003c/p\u003e\n\n\u003cp\u003eただ、\u003ccode\u003euseDebugValue\u003c/code\u003eフックは自分がどのカスタムフックから呼び出されたのか検知します\u003csup id=\"fnref3\"\u003e\u003ca href=\"#fn3\" rel=\"footnote\" title=\"ちゃんと調べたわけではありませんが、どうやらErrorオブジェクトを生成してコールスタックを入手しているようです。\"\u003e3\u003c/a\u003e\u003c/sup\u003e。そして、対応するカスタムフックの横に指定したデバッグ情報を表示します。\u003c/p\u003e\n\n\u003cp\u003e実際、この\u003ccode\u003eUseDebugValueSample\u003c/code\u003eをReact用拡張機能で見ると下の画像のように表示されています。\u003ccode\u003euseDebugValue\u003c/code\u003eフックで指定した値が\u003ccode\u003euseRenderCount\u003c/code\u003eカスタムフックのデバッグ情報として表示されていることが分かります。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://gyazo.com/3894c8db5d7c33c69c2321291fa2be16\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/948a03f61e4eb0a4a0e5ac7da97307c4ef680dc5/68747470733a2f2f692e6779617a6f2e636f6d2f33383934633864623564376333336336396332333231323931666132626531362e706e67\" alt=\"Image from Gyazo\" data-canonical-src=\"https://i.gyazo.com/3894c8db5d7c33c69c2321291fa2be16.png\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこのフックは、これから増えるであろう、カスタムフックをライブラリで提供するような場合に便利かもしれません。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"デバッグ情報の遅延計算\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E6%83%85%E5%A0%B1%E3%81%AE%E9%81%85%E5%BB%B6%E8%A8%88%E7%AE%97\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eデバッグ情報の遅延計算\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003euseDebugValue\u003c/code\u003eの呼び出しはただのJavaScriptコードですから、フックの処理時には普通に実行されます。つまり、開発者ツールを使用していない一般ユーザーがアプリを実行している場合であっても\u003ccode\u003euseDebugValue\u003c/code\u003eの呼び出しは（実際見られることはないので無意味ですが）行われています。\u003c/p\u003e\n\n\u003cp\u003e凝ったデバッグ情報を表示したい場合、\u003ccode\u003euseDebugValue\u003c/code\u003eの引数の計算が多少重い処理になるかもしれません。そのような場合、開発者ツールを使わないユーザーの処理が重くなってしまうのは望ましくありません。そのような事態を避けるために、\u003ccode\u003euseDebugValue\u003c/code\u003eの第2引数に、生のデータをデバッグ情報に加工する関数を渡すことができます。こうすると、その関数は実際にデバッグ情報を表示する際に実行されます。これにより、デバッグ情報が必要ない場合に余計な計算を省くことができるというわけです。この機能は以下のように使います。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e  \u003cspan class=\"nx\"\u003euseDebugValue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003erenderCountRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e`このコンポーネントは\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e回再描画されました`\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこの例では、第1引数はカウント数という生のデータになり、それを文字列へと加工する処理は遅延されるようになりました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"useimperativehandle\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#useimperativehandle\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003euseImperativeHandle\u003c/h2\u003e\n\n\u003cp\u003eこれが最後のフックです。このフックは、\u003cstrong\u003eコンポーネントのインスタンスが持つメソッドを生成する\u003c/strong\u003eことができるフックです。使い方は例を参照してください。なお、コンポーネントのインスタンスというのは、\u003ccode\u003eref\u003c/code\u003eで取得できるオブジェクトのことです。\u003ccode\u003e\u0026lt;div ref={myRef} /\u0026gt;\u003c/code\u003eのようにDOM要素に対して\u003ccode\u003eref\u003c/code\u003eを使った場合は生のDOMノードが得られますが、\u003ccode\u003e\u0026lt;MyComponent ref={myRef} /\u0026gt;\u003c/code\u003eの場合は\u003ccode\u003eMyComponent\u003c/code\u003eコンポーネントのインスタンス（のようなもの）が得られることになります。\u003ccode\u003eMyComponent\u003c/code\u003e側が\u003ccode\u003euseImperativeHandle\u003c/code\u003eフックを使うことで、ここで得られるインスタンスにメソッドを生やすことができます。\u003c/p\u003e\n\n\u003cp\u003e次の例は、少し前に出てきた、現在時刻をリアルタイムに表示するサンプルを改造したものです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"jsx\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003euseImperativeHandleの例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"s1\"\u003e'react'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003euseEffect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003euseCallback\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003euseImperativeHandle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eforwardRef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eReact\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexport\u003c/span\u003e \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eUseIMperativeHandleSample\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eclockRef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// スタートボタンを押したときの処理\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eonStart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseCallback\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eclockRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e[]);\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// ストップボタンを押したときの処理\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eonStop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseCallback\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eclockRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e[]);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eClock\u003c/span\u003e \u003cspan class=\"na\"\u003eref=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eclockRef\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eonStart\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e再開\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eonStop\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e停止\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eClock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eforwardRef\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003e_props\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eref\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// 時刻を表示する場所のref\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// リアルタイム表示がオンかどうかのref\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eenabledFlagRef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseRef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// リアルタイムに時刻を表示する処理\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003euseEffect\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003erafid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eloop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"c1\"\u003e// リアルタイム表示がオンのときのみ表示を更新\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eenabledFlagRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// 現在時刻を表示\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enow\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nb\"\u003eDate\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etextContent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetHours\u003c/span\u003e\u003cspan class=\"p\"\u003e()).\u003c/span\u003e\u003cspan class=\"nx\"\u003epadStart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n          \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"s1\"\u003e'0'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e)}\u003c/span\u003e\u003cspan class=\"s2\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetMinutes\u003c/span\u003e\u003cspan class=\"p\"\u003e()).\u003c/span\u003e\u003cspan class=\"nx\"\u003epadStart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'0'\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u003c/span\u003e\u003cspan class=\"s2\"\u003e:\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n          \u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetSeconds\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003epadStart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'0'\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u003c/span\u003e\u003cspan class=\"s2\"\u003e.\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetMilliseconds\u003c/span\u003e\u003cspan class=\"p\"\u003e()).\u003c/span\u003e\u003cspan class=\"nx\"\u003epadStart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'0'\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003erafid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erequestAnimationFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eloop\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eloop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecancelAnimationFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erafid\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// コンポーネントのインスタンスが持つメソッドを宣言\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003euseImperativeHandle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eref\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e({\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eenabledFlagRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003estop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eenabledFlagRef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}));\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e \u003cspan class=\"na\"\u003eref=\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003edisplayAreaRef\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e最後なので例が少し長くなっています。下で定義されている\u003ccode\u003eClock\u003c/code\u003eコンポーネントが\u003ccode\u003euseImperativeHandle\u003c/code\u003eフックを使用して\u003ccode\u003estart\u003c/code\u003eと\u003ccode\u003estop\u003c/code\u003eという2つのメソッドを宣言しています。このコンポーネントは\u003ccode\u003eenabledFlagRef\u003c/code\u003eの値を用いて表示を更新するかどうかを制御しており、この2つのメソッドを用いてそれを外部から制御できるようにしようという魂胆です。使う側である\u003ccode\u003eUseImperativeHandleSample\u003c/code\u003eコンポーネントは、\u003ccode\u003eclockRef\u003c/code\u003eに\u003ccode\u003eClock\u003c/code\u003eコンポーネントのインスタンスを入れて、ボタンが押されるとその\u003ccode\u003estart\u003c/code\u003eや\u003ccode\u003estop\u003c/code\u003eを呼び出すようになっています。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003euseImperativeHandle\u003c/code\u003eを使うときの最初のポイントは、よく見ると\u003ccode\u003eClock\u003c/code\u003eが\u003ccode\u003eforwardRef\u003c/code\u003eという関数に包まれている点です。\u003ccode\u003eforwardRef\u003c/code\u003eは大雑把に言えば関数型コンポーネントの\u003ccode\u003eref\u003c/code\u003eを加工したいときに使うものです。今回はまさに\u003ccode\u003euseImperativeHandle\u003c/code\u003eによって\u003ccode\u003eref\u003c/code\u003eにメソッドを生やそうとしているのでした。\u003cbr\u003e\n\u003ccode\u003eforwardRef\u003c/code\u003eの引数として関数コンポーネントを渡すのですが、第2引数として\u003ccode\u003eref\u003c/code\u003eが渡されるようになっています。これがそのまま\u003ccode\u003euseImperativeHandle\u003c/code\u003eの第1引数となります。第2引数はオブジェクトを返す関数です。返されたオブジェクトが持っているメソッドが、そのままこのコンポーネントの\u003ccode\u003eref\u003c/code\u003eのメソッドとなります。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"名前について\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%90%8D%E5%89%8D%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e名前について\u003c/h3\u003e\n\n\u003cp\u003eImperativeというのは「手続き的」ということです。手続き的というのは、props等によって宣言的にUIを定義するReactの流儀から外れていることを意味しています。実際、この例だって\u003ccode\u003euseImperativeHandle\u003c/code\u003eを使う必然性があるわけではなく、オン/オフのフラグをpropsで渡すことも可能です。そもそもコンポーネントにメソッドを生やすというのはコンポーネントをprops（やコンテキスト）以外の手段で制御しようということですから、真っ向からReactのやり方に反しているのがお分かりになると思います。それでも需要があるからこそこのフックが追加されたのでしょうが、あまり積極的に使うものでもないよというメッセージが名前に表れています。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cp\u003e以上で、React Hooksの最初の正式版が導入されたReact 16.8に存在するフックを全て解説しました。個人的によく使いそうなのは\u003ccode\u003euseState\u003c/code\u003eと\u003ccode\u003euseEffect\u003c/code\u003e、あと\u003ccode\u003euseRef\u003c/code\u003eあたりです。\u003ccode\u003euseRef\u003c/code\u003eは\u003ccode\u003euseEffect\u003c/code\u003eのロジックが複雑化してきたら出番が増えてきます。副作用を複雑化させるのはあまり褒められたことではありませんが。\u003c/p\u003e\n\n\u003cp\u003e途中何回かクラスコンポーネントとの比較を挟みましたが、さすが後発のAPIだけあって、よりシンプルで直感的な記述が可能になっているのがお分かりになったことでしょう。そもそも関数コンポーネント自体がシンプルなAPIということもあり、ソースコードのシンプルさに大きく貢献してくれます。また、最初関数コンポーネントで書いていたのに状態が必要になってしまったときに、クラスコンポーネントに書き直す必要がないというのも嬉しい点です\u003csup id=\"fnref4\"\u003e\u003ca href=\"#fn4\" rel=\"footnote\" title=\"recomposeを使っている人は関数コンポーネントのままでもいけるぞと思ったかもしれません。それはある意味で正しく、React Hooksはrecomposeの進化系と考えることもできます。なお、recomposeはReact Hooksの登場と同時に機能追加等の停止が宣言されました。今後はReact Hooksがrecomposeに取って代わることになります。\"\u003e4\u003c/a\u003e\u003c/sup\u003e。\u003c/p\u003e\n\n\u003cp\u003e途中何回かリンクしましたが、筆者の他の記事に\u003cstrong\u003eカスタムフック\u003c/strong\u003eを取り扱ったものがあります。今回紹介したフックたちを組み合わせて\u003cstrong\u003eカスタムフック\u003c/strong\u003eを作ることこそReact Hooksの本質であると言っても過言ではありません。そう、これを読み終わってなるほどと思ったあなたはまだReact Hooksのスタートラインの3メートルくらい手前にいる状態なのです。ぜひこちらの記事も読んでReact Hooksのスタートを切ってください。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://qiita.com/uhyo/items/27a83d9044945034c4da\"\u003e作って理解するReact Hooks\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n\u003chr\u003e\n\u003col\u003e\n\n\u003cli id=\"fn1\"\u003e\n\u003cp\u003e一応補足しておくと、クラスコンポーネントなどの旧来の機能が React Hooks に取って代わられて廃止されるという予定は今のところありません。ですから、React Hooks を避けながら React を使い続けることも可能です。筆者はそういう人（/チーム）は React を使うのに向いていないという説を推しますが。 \u003ca href=\"#fnref1\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\"fn2\"\u003e\n\u003cp\u003e第 2 引数の省略と、第 2 引数に\u003ccode\u003e[]\u003c/code\u003eを指定するのとは異なるという点に注意してください。第 2 引数を省略した場合はレンダリングごとにコールバック関数が呼ばれますが、\u003ccode\u003e[]\u003c/code\u003eを指定した場合は初回のレンダリングでのみコールバック関数が呼ばれます。 \u003ca href=\"#fnref2\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\"fn3\"\u003e\n\u003cp\u003eちゃんと調べたわけではありませんが、どうやら\u003ccode\u003eError\u003c/code\u003eオブジェクトを生成してコールスタックを入手しているようです。 \u003ca href=\"#fnref3\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\"fn4\"\u003e\n\u003cp\u003e\u003ccode\u003erecompose\u003c/code\u003eを使っている人は関数コンポーネントのままでもいけるぞと思ったかもしれません。それはある意味で正しく、React Hooksは\u003ccode\u003erecompose\u003c/code\u003eの進化系と考えることもできます。なお、\u003ccode\u003erecompose\u003c/code\u003eはReact Hooksの登場と同時に機能追加等の停止が宣言されました。今後はReact Hooksが\u003ccode\u003erecompose\u003c/code\u003eに取って代わることになります。 \u003ca href=\"#fnref4\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003c/ol\u003e\n\u003c/div\u003e\n","body":"来たる 2 月 4 日、ついに React 16.8 の正式版がリリースされます。この React 16.8 には、アルファ版が公開されて以来常に React ユーザーたちの関心をほしいままにしてきた**React Hooks**が正式版となって追加されます。\n\n\u003cfont color=\"#777777\"\u003e※追記：\u003cdel\u003eアメリカ時間で 2 月 5 日になっても React 16.8 がリリースされませんでした。事前情報で 2 月 4 日と言ってたのに……。いつになったらリリースされるのかはよく分かりません。\u003c/del\u003e2 月 6 日（日本時間）に React 16.8 がリリースされました！\u003c/font\u003e\n\n熱心な React ユーザーの方は、当然 React Hooks の情報を常に追っており正式版がリリースされたらすぐにでも自分のコードで使いはじめる準備ができていることと思います。しかし、この記事をご覧の方々の中には React を使っているにも関わらず「**React Hooks のことはよく分からない**」とか「**聞いたことくらいはあるけど今どうなっているのか知らない**」とか「**正式版が出てから調べればいいやと思っていた**」という方がもしかしたら居るかもしれません。\n\nいよいよ正式版の登場と相成ってしまいましたから、皆さんはもう React Hooks から逃げることはできません[^note1]。この記事では上記のような方々を対象として、**React Hooks の正式版に備えてどんなフックがあるのかをすべて説明します**。アルファ版のうちは API の変化もありましたから、少し前にちょっと調べてみたけど今どうなっているのかは分からないというような人は要チェックです。なお、React はドキュメントの充実に力を入れており、React Hooks に関しても[公式ドキュメント](https://reactjs.org/docs/hooks-reference.html)がちゃんと最新の状態に保たれています。ですから、英語が読める人はこの記事を読まずに公式ドキュメントを読むのもよいかもしれません。\n\n[^note1]: 一応補足しておくと、クラスコンポーネントなどの旧来の機能が React Hooks に取って代わられて廃止されるという予定は今のところありません。ですから、React Hooks を避けながら React を使い続けることも可能です。筆者はそういう人（/チーム）は React を使うのに向いていないという説を推しますが。\n\n記事中に登場するサンプルコードは[GitHub](https://github.com/uhyo/react-hooks-sandbox/tree/review/src/review)に置いてあります。\n\n# React Hooks の概要\n\n総ざらいというタイトルをつけた記事なので、一応 React Hooks について基礎から説明しておきます。React Hooks は、一言で言えば**関数コンポーネントから使える新しい API**です。これまで、関数コンポーネントは引数として props を受け取り、レンダリング結果を返り値で返すというインターフェースで定義され、ステートなどの複雑な機能を持たない単純なコンポーネントを作れるものとして提供されていました。初期には Stateless Function Component（状態なし関数コンポーネント）という用語が使われていたことからも分かる通り、もともと関数コンポーネントは、クラスコンポーネントが持つような`state`の機能や`componentDidMount`を始めとするライフサイクルメソッドを持ちませんでした。\n\nReact Hooks によって、関数コンポーネントにこれらの機能を持たせることができるようになります。すなわち、従来はクラスコンポーネントでしか出来なかったことが関数コンポーネントでもできるようになるのです。ただ一つ注意していただきたいのは、**React Hooks はクラスコンポーネントの API をただ移植したわけではない**ということです。React Hooks の API は新しくデザインし直された API であり、従来の API の問題点が解消されています。例えば、フックの利用方法をただの関数呼び出しとすることによって、フックの合成（＝カスタムフックの作成）を容易にしています（カスタムフックについては[筆者の以前の記事](https://qiita.com/uhyo/items/27a83d9044945034c4da)が参考になるかもしれません）。\n\nReact Hooks は、API 上は`use`から始まる名前のただの関数です。`react`パッケージから`useState`や`useEffect`などの関数がエクスポートされています。裏では React が今どのコンポーネントを処理しているかといった情報を保持しており、これらの関数はその情報に基づいて適切に動作します。現在のところ、React Hooks の API は関数コンポーネント専用であり、それ以外のシチュエーションで呼び出すことはできません。\n\n# 基本のフック\n\n先述のドキュメントでは、`useState`, `useEffect`, `useContext`の 3 つが基本的なフックとして挙げられています。それに倣ってここでもまずはこの 3 つを紹介します。\n\n## useState\n\n`useState`フックは、**関数コンポーネントにステートを持たせられる API** です。このフックを使うと、クラスコンポーネントにおける`this.state`に値を保存しておくのと同じような感じで、コンポーネントに状態を持たせることができます。使い方は`const [stateの値, state更新関数] = useState(state初期値);`というのが基本です。\n\n### useState のサンプル\n\nさっそくですが、`useState`の使用例を見てみましょう。よくある例ですが、ボタンを押すと数値が増えたり減ったりするやつです。\n\n```jsx:useStateのサンプル\nimport * as React from 'react';\nconst { useState } = React;\n\nexport const UseStateSample = () =\u003e {\n  const [count, setCount] = useState(0);\n\n  return (\n    \u003cp\u003e\n      \u003cbutton onClick={() =\u003e setCount(count - 1)}\u003e-\u003c/button\u003e\n      \u003cb\u003e{count}\u003c/b\u003e\n      \u003cbutton onClick={() =\u003e setCount(count + 1)}\u003e+\u003c/button\u003e\n    \u003c/p\u003e\n  );\n};\n```\n\nこの`useStateSample`は関数コンポーネントで、特に props を受け取らずに render 内容を返すという従来どおりのインターフェースを持っています。ポイントは、その処理の中で`useState`関数を呼び出している点です。\n\n今回は`count`というステートを初期値`0`で用意しています。よって、`\u003cb\u003e{count}\u003c/b\u003e`のところは最初は 0 が表示されます。2 つのボタンをクリックすると、`setCount`が呼び出されるようになっています。`setCount`を呼び出した場合は渡した引数で`count`ステートが更新されます。つまり、`UseStateSample`の再`render`処理が発生し、その際`useState`によって返される`count`の値が新しい値となっています。\n\n### クラスコンポーネントとの比較\n\n上のサンプルと同じ処理を敢えて旧来のクラスコンポーネントで書くとこんな感じです。\n\n```jsx\nexport class UseStateSample extends React.Component {\n  state = { count: 0 };\n  render() {\n    const { count } = this.state;\n    return (\n      \u003cp\u003e\n        \u003cbutton onClick={() =\u003e this.setState({ count: count - 1 })}\u003e-\u003c/button\u003e\n        \u003cb\u003e{count}\u003c/b\u003e\n        \u003cbutton onClick={() =\u003e this.setState({ count: count + 1 })}\u003e+\u003c/button\u003e\n      \u003c/p\u003e\n    );\n  }\n}\n```\n\n関数コンポーネントと Hooks で書いた場合に比べて煩雑ですね。その要因としては、クラスコンポーネントでは`this.state`がオブジェクトであることや、`this.setState`がそのオブジェクトのうち一部をアップデートするような API 設計になっていることが挙げられます。React Hooks の API では`count`というステートに対して`setCount`という専用の関数がセットで用意されますから、`{count: count+1}`のような余計なオブジェクト生成がなく直感的かつすっきりと書くことができています。\n\n### 複数のステートを使う\n\n関数コンポーネントでは、`useState`を複数回呼ぶことで複数のステートを利用することができます。その場合、それぞれのステートに対して別々の更新関数が得られます。\n\n```jsx:複数のステートを用いる例\nexport const UseStateSample2 = () =\u003e {\n  const [left, setLeft] = useState(0);\n  const [right, setRight] = useState(0);\n\n  return (\n    \u003cp\u003e\n      \u003cb\u003e{left}\u003c/b\u003e\n      \u003cbutton\n        onClick={() =\u003e {\n          setLeft(left + 1);\n          setRight(right - 1);\n        }}\n      \u003e\n        ←\n      \u003c/button\u003e\n      \u003cb\u003e{right}\u003c/b\u003e\n      \u003cbutton onClick={() =\u003e setRight(right + 1)}\u003e+\u003c/button\u003e\n    \u003c/p\u003e\n  );\n};\n```\n\nこの例ではコンポーネントは`left`と`right`という 2 つのステートを持っています。それぞれのステートをアップデートするには対応する関数を用います。真ん中あたりに見えるように、複数のステートを同時に更新するには関数を全部呼びます。\n\nこれを見ると、ステートが複雑になってきたときにステートの更新が一発でできずにたくさんの関数呼び出しが必要になってしまうという懸念があるかもしれません。その場合はステートの値を数値などではなくオブジェクトにして一発で更新するほうがよいことがあります。このやり方を支援するフックとして`useReducer`がありますので、あとで紹介します。\n\n### 関数によるステートの更新\n\nステートの更新関数（上の例での`setCount`など）を呼ぶ場合、今までのサンプルでは新しいステートの値を渡していました。下記の例では、このボタンを押すと`count`ステートを 1 増やす、つまり新しい値として`count + 1`をセットしていることが分かります。\n\n```jsx\n\u003cbutton onClick={() =\u003e setCount(count + 1)}\u003e+\u003c/button\u003e\n```\n\n実は、更新関数には**関数**を渡すことができます。その場合、これは現在のステートの値を受け取って新しいステートの値を返す関数として解釈されます。つまり、上の例はこのように書き換えることができます。\n\n```jsx\n\u003cbutton onClick={() =\u003e setCount(count =\u003e count + 1)}\u003e+\u003c/button\u003e\n```\n\nこれは`setCount`に関数を渡すことで、「現在のステートを読んで、それに 1 を足した値を新しいステートの値とする」ということを指示しています。このように、次のステートの値が現在のステートに依存する場合（すなわち現在のステートから新しいステートを計算する場合）は関数を用いた更新が適しています。\n\nその理由の 1 つは、この方法だとステートの更新ロジックを純粋関数に抜き出すことができることです。さらにもう 1 つの理由として、関数を使わないとコールバックが複数回呼ばれる場合に正しく対処できないことがあります。\n\n例として、「1 回押すと onClick が 5 回発生するボタン」というコンポーネント`SuperButton`を作ってみました。このボタンを使うと 2 つの方法の違いが分かります。\n\n```jsx\nconst SuperButton = ({ onClick, children }) =\u003e {\n  const onclickHere =\n    onClick \u0026\u0026\n    (e =\u003e {\n      for (const _ of [0, 1, 2, 3, 4]) onClick(e);\n    });\n  return \u003cbutton onClick={onclickHere}\u003e{children}\u003c/button\u003e;\n};\nexport const UseStateSample4 = () =\u003e {\n  const [count, setCount] = useState(0);\n\n  return (\n    \u003cp\u003e\n      \u003cSuperButton onClick={() =\u003e setCount(count - 1)}\u003e-\u003c/SuperButton\u003e\n      \u003cb\u003e{count}\u003c/b\u003e\n      \u003cSuperButton onClick={() =\u003e setCount(count =\u003e count + 1)}\u003e+\u003c/SuperButton\u003e\n    \u003c/p\u003e\n  );\n};\n```\n\nこの例では、`SuperButton`の onClick 関数で 2 種類の方法で書いたステートの更新を発生させています。既にお察しかと思いますが、`() =\u003e setCount(count - 1)`のほうは、これが 5 回連続で呼び出されても`count`は 1 だけ減ります。なぜなら、`setCount(count - 1)`で参照される`count`は常にこの`UseStateSample4`コンポーネントがレンダリングされたときの`count`だからです。\nそれに対し、`()=\u003e setCount(count =\u003e count + 1)`の場合は、これが 5 回呼び出されることで`count`は 5 増えます。これは、この関数が呼び出されるたびに現在の`count`の値が参照される（そしてそれに 1 を足した数値が新しい`count`となる）からです。\n\nこのように、関数がワンパスで複数回呼び出されることを想定すると、関数を用いたステート更新（上の例で言えば後者）にしないと想定した動作にならないことがあります。繰り返しますが、現在のステートに依存して更新を行うならこのように関数をステート更新関数に渡しましょう。\n\n## useEffect\n\n`useState`と並んでよく使うであろうフックがこの`useEffect`フックです。これは**レンダリング後に行う処理を指定できるフック**です。クラスコンポーネントのライフサイクルでいえば、`componentDidMount`及び`componentDidUpdate`に**おおよそ**相当するものです（実際には多少違うのですが、それは後で説明します）。\n\n例えば、以下の例は 1 秒ごとに表示されている値が 1 増えるコンポーネントです。現在表示している値をステートで管理するために、さっき紹介した`useState`と組み合わせて実装しています。\n\n```jsx\nimport * as React from 'react';\nconst { useState, useEffect } = React;\n\nexport const UseEffectSample1 = () =\u003e {\n  const [count, setCount] = useState(0);\n\n  useEffect(() =\u003e {\n    const timerId = setTimeout(() =\u003e {\n      setCount(count =\u003e count + 1);\n    }, 1000);\n    // クリーンアップ関数を返す\n    return () =\u003e clearTimeout(timerId);\n  }, [count]);\n\n  return (\n    \u003cp\u003e\n      time: \u003cb\u003e{count}\u003c/b\u003e\n    \u003c/p\u003e\n  );\n};\n```\n\nこのように、`useEffect`は 2 つの引数を取ります。返り値はありません。また、2 つ目の引数は省略可能です。1 つ目の引数は**コールバック関数**であり、**この関数はコンポーネントのレンダリング完了時に呼ばれます**。最初のレンダリングはもちろん、再レンダリングが発生したあとにも呼ばれます。ただし、第 2 引数でコールバック関数を呼ぶタイミングを制御できます。第 2 引数は値の配列であり、**配列のいずれかの値が前回と変わったときのみコールバック関数を呼ぶ**という意味になります。省略した場合は無条件、つまりレンダリングの度に関数が呼ばれます[^useeffect_note1]。\n\n[^useeffect_note1]: 第 2 引数の省略と、第 2 引数に`[]`を指定するのとは異なるという点に注意してください。第 2 引数を省略した場合はレンダリングごとにコールバック関数が呼ばれますが、`[]`を指定した場合は初回のレンダリングでのみコールバック関数が呼ばれます。\n\n上のサンプルでは、まず最初のレンダリングが完了したタイミングで`useEffect`に指定したコールバック関数が呼びだされます。それにより、1 秒後に`count`ステートが更新されます。それによりコンポーネントの再レンダリングが発生し、再び`useEffect`のコールバック関数が呼ばれます。この繰り返しにより、このコンポーネントは 1 秒ごとに数値が 1 ずつ増えていくコンポーネントとなります。\n\n今回第 2 引数は`[count]`です。つまり、レンダリング終了時に、`count`の値が前回のレンダリングと変わっていたら`useEffect`のコールバックを発火するということになります。今回の場合はステートがこれだけなので省略しても同じですが、他にもステートがある場合に余計な処理が発生しないようにする効果があります。\n\nここで呼ばれているコールバック関数は、よく見ると関数を戻り値としています。これは**クリーンアップ関数**です。クリーンアップ関数を宣言した場合は、**次回のコールバックが呼ばれる前にクリーンアップ関数が呼ばれます**。また、**コンポーネントがアンマウントされる前にもクリーンアップ関数が呼ばれます**。要するに、描画時にコールバック関数が呼ばれた場合、その描画が消されるときに対応するクリーンアップ関数が呼ばれるということです。とても便利ですね。\n\n上の例では、正確には初回レンダリング →`useEffect`のコールバック関数が呼ばれる →1 秒後にステートが変更されて再レンダリングが発生 →**クリーンアップ関数が呼ばれる**→`useEffect`のコールバック関数が再び呼ばれる　という流れをとっていることになります。ここではクリーンアップ関数で`clearTimeout`を呼んでいますが、このようにコールバック関数で発生した副作用の後始末をするのがクリーンアップ関数の主な役目です。このクリーンアップ関数は`setTimeout`の発火後に呼ばれた場合は意味がありませんが、コンポーネントがアンマウントされてまだ`setTimeout`が発火していない場合に、すでにアンマウントされたコンポーネントのステートを変更してしまうのを防ぐ意味があります。\n\n## useContext\n\n`useContext`は、**指定したコンテキストの現在の値を得るフック**です。コンテキストというのは React 16.3 で搭載された新しいコンテキスト API によるものを指しています。`React.createContext`で作成したコンテキストオブジェクトを`useContext`に渡すことで、そのコンテキストの現在の値を返り値で得ることができます。\n\n```jsx:useContextのサンプル\nimport * as React from 'react';\nconst { useState, useContext, createContext } = React;\n\nconst MyContext = createContext(() =\u003e {});\n\nexport const UseContextSample = () =\u003e {\n  const [count, setCount] = useState(0);\n\n  return (\n    \u003cdiv\u003e\n      \u003cp\u003e\n        \u003cb\u003e{count}\u003c/b\u003e\n      \u003c/p\u003e\n      \u003cMyContext.Provider value={() =\u003e setCount(count =\u003e count + 1)}\u003e\n        \u003cIncrementButton /\u003e\n      \u003c/MyContext.Provider\u003e\n    \u003c/div\u003e\n  );\n};\n\nconst IncrementButton = () =\u003e {\n  const incrementHandler = useContext(MyContext);\n\n  return (\n    \u003cp\u003e\n      \u003cbutton onClick={incrementHandler}\u003e+\u003c/button\u003e\n    \u003c/p\u003e\n  );\n};\n```\n\nこの例は相変わらずボタンを押すと数値が増えるという単純なサンプルですが、数値を増やすボタンを`IncrementButton`という別のコンポーネントに移しました。そうなると、ボタンを押したときの処理（`UseContextSample`のステートを変更する）を`IncrementButton`コンポーネントに伝える必要があります。一番単純な方法は props のひとつとしてその関数を渡すことですが、何段階も伝播させないといけないような場合には props を使うのは適していないことがあります。その場合はこの例のようにコンテキストを使って暗黙に値を伝播させます。\n\n`IncrementButton`を従来の API で書き直すとこんな感じです。コンポーネントのネストが無くなって綺麗に書けるのが嬉しいですね。\n\n```jsx\nconst IncrementButton = () =\u003e {\n  return (\n    \u003cMyContext.Consumer\u003e\n      {incrementHandler =\u003e (\n        \u003cp\u003e\n          \u003cbutton onClick={incrementHandler}\u003e+\u003c/button\u003e\n        \u003c/p\u003e\n      )}\n    \u003c/MyContext.Consumer\u003e\n  );\n};\n```\n\n# そのほかのフック\n\nここまでの 3 つがとても良く使いそうなフックでした。それ以外のフックも続けて紹介していきます。比較的よく使いそうなフックから解説していきます。\n\n## useReducer\n\n`useReducer`は **`useState` の亜種**であり、ステートを宣言するフックです。`useReducer`は、ステートの初期状態に加えて**reducer と呼ばれる関数を渡します**。結果として、現在のステートに加えて、**ステートを更新する関数の代わりに dispatch 関数が得られます**。この reducer や dispatch というのは Redux 用語としてよく知られていますので、Redux を触ったことがあるかたは馴染み深い概念でしょう。\n\n`useReducer`によって作られたステートを更新する場合は、`dispatch`関数に**アクション**を渡します。アクションというのはステートの更新指示を表す値で、別になんでも構いません。そのアクションを引数として、`useReducer`に渡した reducer が呼び出されます。reducer というのは関数であり、アクションと現在のステートを受け取って新しいステートを返します。\n\n```jsx:useReducerの例\nimport * as React from 'react';\nconst { useContext, useReducer, createContext } = React;\n\nconst DispatchContext = createContext(() =\u003e {});\n\nconst reducer = ({ year, month }, action) =\u003e {\n  switch (action) {\n    case 'increment':\n      return month === 11\n        ? { year: year + 1, month: 0 }\n        : { year, month: month + 1 };\n    case 'decrement':\n      return month === 0\n        ? { year: year - 1, month: 11 }\n        : { year, month: month - 1 };\n  }\n};\n\nexport const UseReducerSample = () =\u003e {\n  const [state, dispatch] = useReducer(reducer, {\n    year: 0,\n    month: 1,\n  });\n\n  return (\n    \u003cdiv\u003e\n      \u003cp\u003e\n        \u003cb\u003e\n          {state.year}年{state.month}ヶ月\n        \u003c/b\u003e\n      \u003c/p\u003e\n      \u003cDispatchContext.Provider value={dispatch}\u003e\n        \u003cControlButtons /\u003e\n      \u003c/DispatchContext.Provider\u003e\n    \u003c/div\u003e\n  );\n};\n\nconst ControlButtons = () =\u003e {\n  const dispatch = useContext(DispatchContext);\n\n  return (\n    \u003cp\u003e\n      \u003cbutton onClick={() =\u003e dispatch('decrement')}\u003e-\u003c/button\u003e\n      \u003cbutton onClick={() =\u003e dispatch('increment')}\u003e+\u003c/button\u003e\n    \u003c/p\u003e\n  );\n};\n```\n\nこの例はこのようにレンダリングされます。\n\n[![Image from Gyazo](https://i.gyazo.com/f31fbc5d6970c97e49e7ef79493774f2.png)](https://gyazo.com/f31fbc5d6970c97e49e7ef79493774f2)\n\nこの例のように、**useReducer**には 2 つの引数を渡します。1 つ目の引数は reducer で、2 つ目の引数は初期状態です。今回`useReducer`で宣言するステートは`year`と`month`という 2 つのプロパティを持ったオブジェクトです。`+`ボタンと`-`ボタンを押すと、月が 1 つ増えます。12 ヶ月になると年が 1 つ増えて月が 0 に戻ります。（あくまでサンプルなので、年とか 12 で割って計算しろよという批判は受け付けません。）\n\nボタンが押されたときのロジックが`reducer`関数にまとまっていることが分かりますね。`reducer`の第 1 引数が今の状態で、第 2 引数がアクション（単純な例なので今回は文字列）です。そして、`useReducer`により宣言されたステートの更新は、`dispatch`関数にアクションを渡すことで行います。`dispatch`を子コンポーネントである`ControlButtons`に渡すのは先ほど紹介した`useContext`を使いました。\n\n今回のポイントは、`+`ボタンを押すと`year`と`month`が両方同時に変化する可能性があるということです。このような複雑な変化をアクションという抽象的な命令で表すことによって、ステートを変化させる側（`dispatch`を呼び出す側）の単純化とステート変更ロジックの分離を同時に達成しています。`useReducer`を用いて色々な状態をひとまとめに宣言する場合、色々な子コンポーネントが`dispatch`を用いて状態を変化させるはずですから、この例のように`useContext`と組み合わせて`dispatch`関数を子コンポーネントたちに伝えるのが特に適しています。ステートの更新はすべて`dispatch`を通じて行うため、`dispatch`関数ひとつ伝えれば十分であるというのも嬉しい点です。\n\n### 関数によるステートの初期化\n\n`useReducer`の第 2 引数に初期ステートを渡す代わりに、**関数**を用いてステートを初期化することができます。この場合、`useReducer`の第 3 引数に初期化関数を渡します。また、第 2 引数の意味が変わります。渡した初期化関数の引数として`useReducer`第 2 引数が渡されます。この機能は、ステートの初期化ロジックを別の関数として定義したい場合などに便利です。\n\n```jsx:useReducerの第3引数の例\nconst reducer = ({ year, month }, action) =\u003e {\n  switch (action) {\n    case 'increment':\n      return month === 11\n        ? { year: year + 1, month: 0 }\n        : { year, month: month + 1 };\n    case 'decrement':\n      return month === 0\n        ? { year: year - 1, month: 11 }\n        : { year, month: month - 1 };\n  }\n};\n\nconst init = initialMonth =\u003e ({\n  year: 0,\n  month: initialMonth,\n});\n\nexport const UseReducerSample2 = ({ initialMonth }) =\u003e {\n  const [state, dispatch] = useReducer(reducer, initialMonth, init);\n\n  return (\n    \u003cdiv\u003e\n      \u003cp\u003e\n        \u003cb\u003e\n          {state.year}年{state.month}ヶ月\n        \u003c/b\u003e\n      \u003c/p\u003e\n      \u003cDispatchContext.Provider value={dispatch}\u003e\n        \u003cControlButtons /\u003e\n      \u003c/DispatchContext.Provider\u003e\n    \u003c/div\u003e\n  );\n};\n```\n\nこの例では、ステートの初期化関数`init`を定義して`useReducer`の第 3 引数に渡しました。このコンポーネントを`\u003cUseReducerSample2 initialMonth={10} /\u003e`のように使うと、「0 年 10 ヶ月」の表示からスタートします。このように、第 2 引数を初期ステートではなくステートの元となる値にして、第 3 引数に渡した`init`関数でそれをステートに変換するという方式をとっています。\n\nこの場合は第 2 引数を`{year: 0, month: initialMonth}`とするという手もありますが、初期ステートがコンポーネントの中で定義されているのはどうも微妙に思えます。そういう時に第 3 引数を使いましょう。\n\n## useMemo\n\n`useMemo`は、その名の通り**値のメモ化に使えるフック**です。第 1 引数に値を計算する関数を、第 2 引数に計算される値が依存する値の一覧を渡します。\n\n```jsx:useMemoの例\nimport * as React from 'react';\nconst { useMemo } = React;\n\nexport const UseMemoSample = ({ n }) =\u003e {\n  const sum = useMemo(() =\u003e {\n    let result = 0;\n    for (let i = 1; i \u003c= n; i++) {\n      result += i;\n    }\n    return result;\n  }, [n]);\n\n  return (\n    \u003cdiv\u003e\n      \u003cp\u003e\n        1 + … + n = \u003cb\u003e{sum}\u003c/b\u003e\n      \u003c/p\u003e\n    \u003c/div\u003e\n  );\n};\n```\n\nここで定義した`UseMemoSample`は、1 から指定した値までの和を表示するという意味不明なコンポーネントです。しかも、その和は for ループを回して計算します。`\u003cUseMemoSample n={1000} /\u003e`のように使うと`1 + … + 1000 = 500500`と表示します。\n\nこの例はともかく、ループとか回す処理を render の中にベタ書きすると、レンダリングが行われるたびにそれが計算されることになります。計算結果をメモ化したい、すなわち以前計算した結果が再利用できるときは再利用したい、という場合に`useMemo`が役に立ちます。\n\n`useMemo`の第 1 引数は、値を計算する関数を渡します。それ自身に引数はありませんが、props の値などを使用しても構いません。その関数の返り値が`useMemo`の返り値となります。この関数が呼び出されるのは値の計算が必要となったときです。つまり、初回のレンダリング時および再計算が必要となったときに関数が呼び出されます。`useMemo`は以前の計算の結果を覚えており、再計算が必要ない場合は渡した関数は呼び出されず、以前の計算の結果が返されます。\n\n再計算がいつ必要かは`useMemo`の第 2 引数で指定します。これは`useEffect`の第 2 引数と同じで、ここに渡した値のいずれかが変化したときに再計算が行なわれます。今回の場合は計算結果は`n`に依存しているため、第 2 引数に`[n]`を渡す必要があります。これにより、`n`が変化したとき再計算が行なわれるようになります。\n\n## useCallback\n\n`useCallback`は`useMemo`の亜種です。簡潔に言えば、`useCallback(fn, arr)`は`useMemo(()=\u003e fn, arr)`と同じです。つまり、`useCallback`は計算の必要ない値をメモ化するときに便利なフックです。\n\n計算が必要ないのにメモ化とはどういうことかとお思いかもしれませんが、`useCallback`という名前が示唆するとおり、これは**関数をメモ化するのに便利**です。ポイントは、**`()=\u003e { ... }`のような関数式は毎回新しい関数オブジェクトを作る**という点です。\n\n以下に`useContext`のサンプルを再掲します。\n\n```jsx\nexport const UseContextSample = () =\u003e {\n  const [count, setCount] = useState(0);\n\n  return (\n    \u003cdiv\u003e\n      \u003cp\u003e\n        \u003cb\u003e{count}\u003c/b\u003e\n      \u003c/p\u003e\n      \u003cMyContext.Provider value={() =\u003e setCount(count =\u003e count + 1)}\u003e\n        \u003cIncrementButton /\u003e\n      \u003c/MyContext.Provider\u003e\n    \u003c/div\u003e\n  );\n};\n```\n\nここで`MyContext.Provider`の prop として`()=\u003e setCount(count =\u003e count+1)`という関数を渡しています。これは関数式なので、`UseContextSample`がレンダリングされるたびに新しい関数オブジェクトが作られてそれが`MyContext.Provider`に渡されます。実はこれは良くありません。なぜなら、コンテキストに渡された値が変化するたびにそのコンテキストの値を使用するコンポーネントは全部再描画されるため、上の例で`MyContext`を使用するコンポーネントが毎回再描画されてしまうからです。\n\nこういう時は`useCallback`の出番です。以下のようにすることで再描画を防ぐことができます。\n\n```jsx:useCallbackのサンプル\nimport * as React from 'react';\nconst { useState, useContext, useCallback, createContext } = React;\n\nconst MyContext = createContext(() =\u003e {});\n\nexport const UseCallbackSample = () =\u003e {\n  const [count, setCount] = useState(0);\n\n  const updateCount = useCallback(() =\u003e setCount(count =\u003e count + 1), []);\n\n  return (\n    \u003cdiv\u003e\n      \u003cp\u003e\n        \u003cb\u003e{count}\u003c/b\u003e\n      \u003c/p\u003e\n      \u003cMyContext.Provider value={updateCount}\u003e\n        \u003cIncrementButton /\u003e\n      \u003c/MyContext.Provider\u003e\n    \u003c/div\u003e\n  );\n};\n\nconst IncrementButton = React.memo(() =\u003e {\n  const incrementHandler = useContext(MyContext);\n\n  return (\n    \u003cp\u003e\n      \u003cbutton onClick={incrementHandler}\u003e+\u003c/button\u003e\n    \u003c/p\u003e\n  );\n});\n```\n\nこの例では、`MyContext.Provider`に渡す関数を`useCallback`を用いてメモ化しています。第 2 引数が`[]`ということは、一度初期化された後は`updateCount`は毎回同一の関数オブジェクトとなります。よって、`MyContext.Provider`の値は変化していない扱いとなり、`IncrementButton`は再描画されなくなります。\n\nただし、`IncrementButton`が`React.memo`で囲うように変更されている点に注意してください。これはフックではないので詳細は省きますが、親の`UseCallbackSample`が再描画されても自動的に`IncrementButton`が再描画しないようにする効果があります。この 2 つの施策により`IncrementButton`が再描画される要因が無くなります。このように`useCallback`（や`useMemo`）は最適化に利用することができます。\n\n## useRef\n\n`useRef`は、**ref オブジェクトを作って返すフック**です。この ref オブジェクトは`React.createRef`を使って作ることができるオブジェクトのことです。`useRef`は、同じ呼び出しに対しては同じ ref オブジェクトを返します。ref オブジェクトは`current`プロパティにその中身が入っています。`current`の初期値は`useRef`の引数で指定することができます。\n\n`useRef`のひとつの用途は、コンポーネントの`ref`属性に渡すためのrefオブジェクトを作ることです。`useEffect`と組み合わせた例を作ってみました。\n\n```jsx:useRefのサンプル\nimport * as React from 'react';\nconst { useEffect, useRef } = React;\n\nexport const UseRefSample = () =\u003e {\n  const displayAreaRef = useRef();\n\n  useEffect(() =\u003e {\n    let rafid = null;\n    const loop = () =\u003e {\n      // 現在時刻を表示\n      const now = new Date();\n      displayAreaRef.current.textContent = `${String(now.getHours()).padStart(\n        2,\n        '0',\n      )}:${String(now.getMinutes()).padStart(2, '0')}:${String(\n        now.getSeconds(),\n      ).padStart(2, '0')}.${String(now.getMilliseconds()).padStart(3, '0')}`;\n      rafid = requestAnimationFrame(loop);\n    };\n    loop();\n    return () =\u003e cancelAnimationFrame(rafid);\n  });\n\n  return \u003cp ref={displayAreaRef} /\u003e;\n};\n```\n\nこのコンポーネントはこのような表示となります。\n\n[![Image from Gyazo](https://i.gyazo.com/e4680d4d4038e26962d72a0fe09cd619.png)](https://gyazo.com/e4680d4d4038e26962d72a0fe09cd619)\n\nこれは、`requestAnimationFrame`を用いてリアルタイムで現在時刻をミリ秒単位で表示するコンポーネントです。このような高頻度な更新をステートを用いて行うのは負荷が高そうな気がするので`useEffect`を用いて直接 DOM 操作を行っています。\n\n直接 DOM 操作を行うには、レンダリング後に生の DOM ノードを取得する方法があります。その方法がコンポーネントの`ref`属性（`\u003cp ref={displayAreaRef} /\u003e`）です。この`ref`属性に渡すための ref オブジェクトを`useRef()`フックで作っています。`ref`属性の効果により、レンダリング時に ref オブジェクトの`current`プロパティに DOM ノードがセットされます。この例では`useEffect`のハンドラの中からこの情報を使用しています。\n\n### レンダリング間変数として useRef を使用する\n\n従来、ref オブジェクトというのは専ら、上記の例のように DOM オブジェクトへの参照を得るのに使われてきました。しかし、フックの世界においては`useRef`や ref オブジェクトはその便利さをさらに増しています。\nポイントは、`useRef`が返すオブジェクトはレンダリング間で毎回同じであるということです。特に`useEffect`を使用する場合に、レンダリング間で情報を共有する場合に使用可能です。\n\n例えば、`componentDidUpdate`は「前回の props」と「前回の state」を参照可能でしたが`useEffect`にはその機能はありませんでした。前回の props などを利用したい場合は、その情報を自分で`useRef`に保存しておくことになります。\n\n以下の例は、自分が再レンダリングされた回数を覚えているコンポーネントです。（本当はこういう用途で`useEffect`を使わずにロジックで何とかしたほうがよいですが。というか再レンダリングされた回数が必要なのってどんな場面なのでしょうか。）\n\n```jsx\nexport const UseRefSample2 = () =\u003e {\n  const displayAreaRef = useRef();\n  const renderCountRef = useRef(0);\n\n  useEffect(() =\u003e {\n    renderCountRef.current++;\n    displayAreaRef.current.textContent = String(renderCountRef.current);\n  });\n\n  return (\n    \u003cp\u003e\n      このコンポーネントは\n      \u003cb ref={displayAreaRef} /\u003e\n      回描画されました。\n    \u003c/p\u003e\n  );\n};\n```\n\nこれと同じものをクラスコンポーネントで書くとこんな感じです。`useRef`で得た ref オブジェクトがおおよそコンポーネントの（ステートではない）プロパティに対応していることが分かると思います。それにしても、やっぱりフックを用いた関数コンポーネントのほうがシンプルでいいですね（場合にもよりますが）。\n\n```jsx\nexport class UseRefSample2 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.displayArea = React.createRef();\n    this.renderCount = 0;\n  }\n  render() {\n    return (\n      \u003cp\u003e\n        このコンポーネントは\n        \u003cb ref={this.displayArea} /\u003e\n        回描画されました。\n      \u003c/p\u003e\n    );\n  }\n  _effect() {\n    this.renderCount++;\n    this.displayArea.current.textContent = String(this.renderCount);\n  }\n  componentDidMount() {\n    this._effect();\n  }\n  componentDidUpdate() {\n    this._effect();\n  }\n}\n```\n\n## useLayoutEffect\n`useLayoutEffect`は **`useEffect`の亜種**です。基本的な使い方は`useEffect`と同じですが、**コールバック関数が呼ばれるタイミングが違います**。具体的には、`useEffect`はレンダリングの結果が描画された後に呼び出されますが、`useLayoutEffect`はレンダリング結果がDOMに反映された後描画される前に呼び出されます。\n\nレンダリング結果が描画される前にコールバックの処理が走るという特徴のため、**`useLayoutEffect`の処理はレンダリングをブロックし、レンダリング結果がユーザーに見えるのが遅延されます**。ですから、**その必要がない場合は`useEffect`を使うべき**であるとされています。ちなみに、クラスコンポーネントの`componentDidMount`や`componentDidUpdate`のタイミングはこの`useLayoutEffect`と同じです。`useEffect`は、レンダリングをブロックしなくなったという点でこれらの進化形であると言えるでしょう。\n\n`useLayoutEffect`を使う例を挙げてみます。つい先ほどの`useRef`の例を思い出してください。\n\n```jsx:useRefの例（再掲）\nexport const UseRefSample2 = () =\u003e {\n  const displayAreaRef = useRef();\n  const renderCountRef = useRef(0);\n\n  useEffect(() =\u003e {\n    renderCountRef.current++;\n    displayAreaRef.current.textContent = String(renderCountRef.current);\n  });\n\n  return (\n    \u003cp\u003e\n      このコンポーネントは\n      \u003cb ref={displayAreaRef} /\u003e\n      回描画されました。\n    \u003c/p\u003e\n  );\n};\n```\n\nこれの返り値を見てみると、b要素の中身は最初空です。`useEffect`のコールバックによってこの中身が埋められますが、ここに問題があります。`useEffect`のコールバックはレンダリングが描画後に呼び出されるということは、この中身が空の状態が一瞬ユーザーに見えてしまうのです。実際、下の画像のような描画が表示されてしまいます。\n\n[![Image from Gyazo](https://i.gyazo.com/731e1fbba22fbfd79f3173ddedd1dd86.png)](https://gyazo.com/731e1fbba22fbfd79f3173ddedd1dd86)\n\n`useLayoutEffect`を使用するように書き換えることでこの現象を回避できます。\n\n```jsx:useLayoutEffectの例\nimport * as React from 'react';\nconst { useLayoutEffect, useRef } = React;\n\nexport const UseLayoutEffectSample = () =\u003e {\n  const displayAreaRef = useRef();\n  const renderCountRef = useRef(0);\n\n  useLayoutEffect(() =\u003e {\n    renderCountRef.current++;\n    displayAreaRef.current.textContent = String(renderCountRef.current);\n  });\n\n  return (\n    \u003cp\u003e\n      このコンポーネントは\n      \u003cb ref={displayAreaRef} /\u003e\n      回描画されました。\n    \u003c/p\u003e\n  );\n};\n```\n\n## useDebugValue\n\nこれが恐らく一番新しいフックで、React Hooksを昔は追っていたという方は知らないかもしれません。その名の通り、これはデバッグに使えるフックです。具体的には、**カスタムフックのデバッグ情報をReactの開発者ツール用拡張機能に表示させることができます**。\n\nこれは先ほどの「レンダリング回数を覚えているコンポーネント」をベースにした例です。\n\n```jsx:useDebugValueの例\nimport * as React from 'react';\nconst { useEffect, useRef, useDebugValue } = React;\n\nconst useRenderCount = () =\u003e {\n  const renderCountRef = useRef(0);\n\n  useDebugValue(\n    `このコンポーネントは${renderCountRef.current}回再描画されました`,\n  );\n\n  useEffect(() =\u003e {\n    renderCountRef.current++;\n  });\n};\nexport const UseDebugValueSample = () =\u003e {\n  useRenderCount();\n\n  return \u003cp\u003eこのコンポーネントを開発者ツールで見ると再描画数が表示されます\u003c/p\u003e;\n};\n```\n\nここで定義されている`useRenderCount`関数はカスタムフックです。カスタムフックについては[筆者の以前の記事](https://qiita.com/uhyo/items/27a83d9044945034c4da)に譲りますが、要するに名前が`use`で始まるただの関数です。普通は上の例のように、いくつかのフック呼び出しをまとめて関数にしたものがカスタムフックです。ただの関数ということは、あるコンポーネントから`useRenderCount`カスタムフックを呼び出すのは、その中身に書かれているフックを全部呼び出すのと同じです。何も特殊なことはありません。\n\nただ、`useDebugValue`フックは自分がどのカスタムフックから呼び出されたのか検知します[^debugvalue_callstack]。そして、対応するカスタムフックの横に指定したデバッグ情報を表示します。\n\n[^debugvalue_callstack]: ちゃんと調べたわけではありませんが、どうやら`Error`オブジェクトを生成してコールスタックを入手しているようです。\n\n実際、この`UseDebugValueSample`をReact用拡張機能で見ると下の画像のように表示されています。`useDebugValue`フックで指定した値が`useRenderCount`カスタムフックのデバッグ情報として表示されていることが分かります。\n\n[![Image from Gyazo](https://i.gyazo.com/3894c8db5d7c33c69c2321291fa2be16.png)](https://gyazo.com/3894c8db5d7c33c69c2321291fa2be16)\n\nこのフックは、これから増えるであろう、カスタムフックをライブラリで提供するような場合に便利かもしれません。\n\n### デバッグ情報の遅延計算\n\n`useDebugValue`の呼び出しはただのJavaScriptコードですから、フックの処理時には普通に実行されます。つまり、開発者ツールを使用していない一般ユーザーがアプリを実行している場合であっても`useDebugValue`の呼び出しは（実際見られることはないので無意味ですが）行われています。\n\n凝ったデバッグ情報を表示したい場合、`useDebugValue`の引数の計算が多少重い処理になるかもしれません。そのような場合、開発者ツールを使わないユーザーの処理が重くなってしまうのは望ましくありません。そのような事態を避けるために、`useDebugValue`の第2引数に、生のデータをデバッグ情報に加工する関数を渡すことができます。こうすると、その関数は実際にデバッグ情報を表示する際に実行されます。これにより、デバッグ情報が必要ない場合に余計な計算を省くことができるというわけです。この機能は以下のように使います。\n\n```jsx\n  useDebugValue(\n    renderCountRef.current,\n    count =\u003e `このコンポーネントは${count}回再描画されました`,\n  );\n```\n\nこの例では、第1引数はカウント数という生のデータになり、それを文字列へと加工する処理は遅延されるようになりました。\n\n## useImperativeHandle\n\nこれが最後のフックです。このフックは、**コンポーネントのインスタンスが持つメソッドを生成する**ことができるフックです。使い方は例を参照してください。なお、コンポーネントのインスタンスというのは、`ref`で取得できるオブジェクトのことです。`\u003cdiv ref={myRef} /\u003e`のようにDOM要素に対して`ref`を使った場合は生のDOMノードが得られますが、`\u003cMyComponent ref={myRef} /\u003e`の場合は`MyComponent`コンポーネントのインスタンス（のようなもの）が得られることになります。`MyComponent`側が`useImperativeHandle`フックを使うことで、ここで得られるインスタンスにメソッドを生やすことができます。\n\n次の例は、少し前に出てきた、現在時刻をリアルタイムに表示するサンプルを改造したものです。\n\n```jsx:useImperativeHandleの例\nimport * as React from 'react';\nconst {\n  useEffect,\n  useRef,\n  useCallback,\n  useImperativeHandle,\n  forwardRef,\n} = React;\n\nexport const UseIMperativeHandleSample = () =\u003e {\n  const clockRef = useRef();\n\n  // スタートボタンを押したときの処理\n  const onStart = useCallback(() =\u003e {\n    clockRef.current.start();\n  }, []);\n  // ストップボタンを押したときの処理\n  const onStop = useCallback(() =\u003e {\n    clockRef.current.stop();\n  }, []);\n\n  return (\n    \u003cdiv\u003e\n      \u003cClock ref={clockRef} /\u003e\n      \u003cp\u003e\n        \u003cbutton onClick={onStart}\u003e再開\u003c/button\u003e\n        \u003cbutton onClick={onStop}\u003e停止\u003c/button\u003e\n      \u003c/p\u003e\n    \u003c/div\u003e\n  );\n};\n\nconst Clock = forwardRef((_props, ref) =\u003e {\n  // 時刻を表示する場所のref\n  const displayAreaRef = useRef();\n  // リアルタイム表示がオンかどうかのref\n  const enabledFlagRef = useRef(true);\n\n  // リアルタイムに時刻を表示する処理\n  useEffect(() =\u003e {\n    let rafid = null;\n    const loop = () =\u003e {\n      // リアルタイム表示がオンのときのみ表示を更新\n      if (enabledFlagRef.current) {\n        // 現在時刻を表示\n        const now = new Date();\n        displayAreaRef.current.textContent = `${String(now.getHours()).padStart(\n          2,\n          '0',\n        )}:${String(now.getMinutes()).padStart(2, '0')}:${String(\n          now.getSeconds(),\n        ).padStart(2, '0')}.${String(now.getMilliseconds()).padStart(3, '0')}`;\n      }\n      rafid = requestAnimationFrame(loop);\n    };\n    loop();\n    return () =\u003e cancelAnimationFrame(rafid);\n  });\n  // コンポーネントのインスタンスが持つメソッドを宣言\n  useImperativeHandle(ref, () =\u003e ({\n    start() {\n      enabledFlagRef.current = true;\n    },\n    stop() {\n      enabledFlagRef.current = false;\n    },\n  }));\n\n  return \u003cp ref={displayAreaRef} /\u003e;\n});\n```\n\n最後なので例が少し長くなっています。下で定義されている`Clock`コンポーネントが`useImperativeHandle`フックを使用して`start`と`stop`という2つのメソッドを宣言しています。このコンポーネントは`enabledFlagRef`の値を用いて表示を更新するかどうかを制御しており、この2つのメソッドを用いてそれを外部から制御できるようにしようという魂胆です。使う側である`UseImperativeHandleSample`コンポーネントは、`clockRef`に`Clock`コンポーネントのインスタンスを入れて、ボタンが押されるとその`start`や`stop`を呼び出すようになっています。\n\n`useImperativeHandle`を使うときの最初のポイントは、よく見ると`Clock`が`forwardRef`という関数に包まれている点です。`forwardRef`は大雑把に言えば関数型コンポーネントの`ref`を加工したいときに使うものです。今回はまさに`useImperativeHandle`によって`ref`にメソッドを生やそうとしているのでした。\n`forwardRef`の引数として関数コンポーネントを渡すのですが、第2引数として`ref`が渡されるようになっています。これがそのまま`useImperativeHandle`の第1引数となります。第2引数はオブジェクトを返す関数です。返されたオブジェクトが持っているメソッドが、そのままこのコンポーネントの`ref`のメソッドとなります。\n\n### 名前について\n\nImperativeというのは「手続き的」ということです。手続き的というのは、props等によって宣言的にUIを定義するReactの流儀から外れていることを意味しています。実際、この例だって`useImperativeHandle`を使う必然性があるわけではなく、オン/オフのフラグをpropsで渡すことも可能です。そもそもコンポーネントにメソッドを生やすというのはコンポーネントをprops（やコンテキスト）以外の手段で制御しようということですから、真っ向からReactのやり方に反しているのがお分かりになると思います。それでも需要があるからこそこのフックが追加されたのでしょうが、あまり積極的に使うものでもないよというメッセージが名前に表れています。\n\n# まとめ\n\n以上で、React Hooksの最初の正式版が導入されたReact 16.8に存在するフックを全て解説しました。個人的によく使いそうなのは`useState`と`useEffect`、あと`useRef`あたりです。`useRef`は`useEffect`のロジックが複雑化してきたら出番が増えてきます。副作用を複雑化させるのはあまり褒められたことではありませんが。\n\n途中何回かクラスコンポーネントとの比較を挟みましたが、さすが後発のAPIだけあって、よりシンプルで直感的な記述が可能になっているのがお分かりになったことでしょう。そもそも関数コンポーネント自体がシンプルなAPIということもあり、ソースコードのシンプルさに大きく貢献してくれます。また、最初関数コンポーネントで書いていたのに状態が必要になってしまったときに、クラスコンポーネントに書き直す必要がないというのも嬉しい点です[^recompose]。\n\n[^recompose]: `recompose`を使っている人は関数コンポーネントのままでもいけるぞと思ったかもしれません。それはある意味で正しく、React Hooksは`recompose`の進化系と考えることもできます。なお、`recompose`はReact Hooksの登場と同時に機能追加等の停止が宣言されました。今後はReact Hooksが`recompose`に取って代わることになります。\n\n途中何回かリンクしましたが、筆者の他の記事に**カスタムフック**を取り扱ったものがあります。今回紹介したフックたちを組み合わせて**カスタムフック**を作ることこそReact Hooksの本質であると言っても過言ではありません。そう、これを読み終わってなるほどと思ったあなたはまだReact Hooksのスタートラインの3メートルくらい手前にいる状態なのです。ぜひこちらの記事も読んでReact Hooksのスタートを切ってください。\n\n- [作って理解するReact Hooks](https://qiita.com/uhyo/items/27a83d9044945034c4da)\n","coediting":false,"comments_count":5,"created_at":"2019-02-04T03:38:16+09:00","group":null,"id":"246fb1f30acfeb7699da","likes_count":332,"private":false,"reactions_count":0,"tags":[{"name":"JavaScript","versions":[]},{"name":"React","versions":[]}],"title":"🎉React 16.8: 正式版となったReact Hooksを今さら総ざらいする","updated_at":"2019-02-13T12:14:20+09:00","url":"https://qiita.com/uhyo/items/246fb1f30acfeb7699da","user":{"description":"Totemo yowai amateur developer","facebook_id":"","followees_count":1,"followers_count":198,"github_login_name":"uhyo","id":"uhyo","items_count":23,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":233667,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/233667/profile-images/1516890571","team_only":false,"twitter_screen_name":"uhyo_","website_url":"https://uhy.ooo/"},"page_views_count":null}]